rules:
    unit[R]:
        sequence
            *
                statement
            EOF
    EOF[T]:
        choice
            sequence
                _
                not
                    match ANY
            #error
    _[T]:
        *
            whitespace
    full-prefix[R]:
        sequence
            *
                attribute
            ?
                declaration-modifiers
    access-prefix[R]:
        sequence
            *
                attribute
            ?
                access-level-modifier
    mutation-prefix[R]:
        sequence
            *
                attribute
            ?
                mutation-modifier
    attribute[R]:
        choice
            '@inlinable'
            '@frozen'
            '@escaping'
            '@autoclosure'
            '@usableFromInline'
            '@discardableResult'
            '@nonobjc'
            '@unknown'
            '@main'
            '@testable'
            sequence
                '@inline'
                '('
                choice
                    'never'
                    '__always'
                ')'
            sequence
                '@available'
                '('
                +
                    choice
                        name
                        swift-version
                        ','
                        ':'
                        '*'
                        static-string-literal
                ')'
            sequence
                '@convention'
                '('
                choice
                    'block'
                    'thin'
                    'c'
                ')'
            sequence
                '@objc'
                ?
                    sequence
                        '('
                        +
                            choice
                                ':'
                                name
                        ')'
            '@_show_in_interface'
            '@_fixed_layout'
            '@_nonoverride'
            '@_borrowed'
            '@_transparent'
            '@_nonEphemeral'
            '@_alwaysEmitIntoClient'
            '@_objc_non_lazy_realization'
            sequence
                '@_implements'
                '('
                type-identifier
                *
                    sequence
                        ','
                        type-identifier
                ')'
            sequence
                '@_specialize'
                '('
                generic-where-clause
                ')'
            sequence
                '@_effects'
                '('
                choice
                    'readnone'
                    'readonly'
                    'releasenone'
                ')'
            sequence
                '@_silgen_name'
                '('
                static-string-literal
                ')'
            sequence
                '@_semantics'
                '('
                static-string-literal
                ')'
            sequence
                '@_objcRuntimeName'
                '('
                name
                ')'
            sequence
                '@_cdecl'
                '('
                static-string-literal
                ')'
            '@unsafe_no_objc_tagged_pointer'
            sequence
                '@derivative'
                '('
                'of'
                ':'
                'init'
                '('
                '_'
                ':'
                '_'
                ':'
                ')'
                ')'
            sequence
                '@'
                #error
    declaration-modifiers[R]:
        +
            modifier
    modifier[R]:
        sequence
            _
            modifier-token
    modifier-token[R]:
        choice
            access-level-modifier
            declaration-modifier
            mutation-modifier
    declaration-modifier[R]:
        choice
            'class'
            'convenience'
            'dynamic'
            'final'
            'infix'
            'lazy'
            'optional'
            'override'
            'postfix'
            'prefix'
            'required'
            'static'
            sequence
                'unowned'
                ?
                    sequence
                        '('
                        choice
                            'safe'
                            'unsafe'
                        ')'
            'weak'
            '__consuming'
    access-level-modifier[R]:
        sequence
            access-modifier-base
            ?
                sequence
                    '('
                    'set'
                    ')'
    access-modifier-base[R]:
        choice
            'private'
            'fileprivate'
            'internal'
            'public'
            'open'
    mutation-modifier[R]:
        choice
            'mutating'
            'nonmutating'
    compiler-control-statement[R]:
        choice
            conditional-compilation-block
            line-control-statement
            diagnostic-statement
    conditional-compilation-block[R]:
        sequence
            if-directive-clause
            ?
                elseif-directive-clauses
            ?
                else-directive-clause
            endif-directive
    if-directive-clause[R]:
        choice
            sequence
                if-directive
                compilation-condition
                *
                    statement
            sequence
                if-directive
                #error
    elseif-directive-clauses[R]:
        +
            elseif-directive-clause
    elseif-directive-clause[R]:
        sequence
            elseif-directive
            compilation-condition
            *
                statement
    else-directive-clause[R]:
        sequence
            else-directive
            *
                statement
    if-directive[R]:
        '#if'
    elseif-directive[R]:
        '#elseif'
    else-directive[R]:
        '#else'
    endif-directive[R]:
        '#endif'
    compilation-condition-primary[R]:
        choice
            platform-condition
            name
            boolean-literal
            sequence
                '('
                compilation-condition
                ')'
            sequence
                '!'
                compilation-condition
    compilation-condition[R]:
        sequence
            compilation-condition-primary
            *
                sequence
                    choice
                        '||'
                        '&&'
                    compilation-condition-primary
    platform-condition[R]:
        choice
            sequence
                'os'
                '('
                operating-system
                ')'
            sequence
                'arch'
                '('
                architecture
                ')'
            sequence
                'swift'
                '('
                choice
                    '>='
                    '<'
                swift-version
                ')'
            sequence
                'compiler'
                '('
                choice
                    '>='
                    '<'
                swift-version
                ')'
            sequence
                'canImport'
                '('
                module-name
                ')'
            sequence
                'targetEnvironment'
                '('
                environment
                ')'
    operating-system[R]:
        choice
            'macOS'
            'iOS'
            'watchOS'
            'tvOS'
            'Windows'
            'Android'
            'Linux'
            'OpenBSD'
            #error
    architecture[R]:
        choice
            'i386'
            'x86_64'
            'arm'
            'arm64'
            'wasm32'
            'powerpc64'
            's390x'
            #error
    swift-version[R]:
        sequence
            decimal-digits
            *
                sequence
                    '.'
                    decimal-digits
    module-name[R]:
        name
    environment[R]:
        choice
            'simulator'
            'macCatalyst'
    line-control-statement[R]:
        sequence
            '#sourceLocation'
            '('
            ?
                sequence
                    'file:'
                    file-path
                    ','
                    'line:'
                    line-number
            ')'
    file-path[R]:
        static-string-literal
    line-number[R]:
        sequence
            _
            nonzero-decimal-literal
    diagnostic-statement[R]:
        choice
            sequence
                '#error'
                '('
                diagnostic-message
                ')'
            sequence
                '#warning'
                '('
                diagnostic-message
                ')'
    diagnostic-message[R]:
        static-string-literal
    constant-declaration[R]:
        choice
            sequence
                full-prefix
                'let'
                pattern-initializer-list
            sequence
                full-prefix
                'let'
                #error
    pattern-initializer-list[R]:
        sequence
            pattern-initializer
            *
                sequence
                    ','
                    pattern-initializer
    pattern-initializer[R]:
        sequence
            pattern
            ?
                type-annotation
            ?
                initializer
    initializer[R]:
        choice
            sequence
                '='
                expression
            sequence
                '='
                #error
    enum-declaration[R]:
        choice
            sequence
                access-prefix
                union-style-enum
            sequence
                access-prefix
                raw-value-style-enum
    union-style-enum[R]:
        sequence
            ?
                'indirect'
            'enum'
            not
                more
            enum-name
            ?
                generic-parameter-clause
            ?
                type-inheritance-clause
            ?
                generic-where-clause
            union-style-enum-body
    union-style-enum-body[R]:
        sequence
            '{'
            *
                union-style-enum-member
            '}'
    union-style-enum-member[R]:
        choice
            union-style-enum-case-clause
            declaration
            compiler-control-statement
    union-style-enum-case-clause[R]:
        sequence
            *
                attribute
            ?
                'indirect'
            'case'
            not
                more
            union-style-enum-case-list
    union-style-enum-case-list[R]:
        sequence
            union-style-enum-case
            *
                sequence
                    ','
                    union-style-enum-case
    union-style-enum-case[R]:
        sequence
            enum-case-name
            ?
                enum-tuple-type
    raw-value-style-enum[R]:
        sequence
            'enum'
            not
                more
            enum-name
            ?
                generic-parameter-clause
            ?
                type-inheritance-clause
            ?
                generic-where-clause
            raw-value-style-enum-body
    raw-value-style-enum-body[R]:
        sequence
            '{'
            +
                raw-value-style-enum-member
            '}'
    raw-value-style-enum-member[R]:
        choice
            raw-value-style-enum-case-clause
            declaration
            compiler-control-statement
    raw-value-style-enum-case-clause[R]:
        sequence
            *
                attribute
            'case'
            not
                more
            raw-value-style-enum-case-list
    raw-value-style-enum-case-list[R]:
        sequence
            raw-value-style-enum-case
            *
                sequence
                    ','
                    raw-value-style-enum-case
    raw-value-style-enum-case[R]:
        sequence
            enum-case-name
            ?
                raw-value-assignment
    raw-value-assignment[R]:
        sequence
            '='
            raw-value-literal
    raw-value-literal[R]:
        choice
            numeric-literal
            static-string-literal
            boolean-literal
    enum-name[R]:
        name
    enum-case-name[R]:
        name
    extension-declaration[R]:
        choice
            sequence
                access-prefix
                'extension'
                type-identifier
                ?
                    type-inheritance-clause
                ?
                    generic-where-clause
                extension-body
            sequence
                access-prefix
                'extension'
                type-identifier
                #error
            sequence
                access-prefix
                'extension'
                #error
    extension-body[R]:
        choice
            sequence
                '{'
                '}'
            sequence
                '{'
                +
                    extension-member
                '}'
            sequence
                '{'
                #error
    extension-member[R]:
        choice
            declaration
            compiler-control-statement
    function-declaration[R]:
        choice
            sequence
                function-head
                function-name
                ?
                    generic-parameter-clause
                function-signature
                ?
                    generic-where-clause
                ?
                    function-body
            sequence
                function-head
                #error
    function-head[R]:
        sequence
            full-prefix
            'func'
    function-signature[R]:
        sequence
            parameter-clause
            ?
                maythrow
            ?
                function-result
    maythrow[R]:
        choice
            'throws'
            'rethrows'
    function-name[R]:
        choice
            name
            operator-name
            #error
    parameter-clause[R]:
        choice
            sequence
                '('
                ')'
            sequence
                '('
                parameter-list
                ')'
            #error
    parameter-list[R]:
        sequence
            parameter
            *
                sequence
                    ','
                    parameter
    parameter[R]:
        choice
            sequence
                *
                    attribute
                external-name
                local-name
                type-annotation
                default-argument-clause
            sequence
                *
                    attribute
                external-name
                local-name
                type-annotation
                '...'
            sequence
                *
                    attribute
                external-name
                local-name
                type-annotation
            sequence
                *
                    attribute
                local-name
                type-annotation
                default-argument-clause
            sequence
                *
                    attribute
                local-name
                type-annotation
                '...'
            sequence
                *
                    attribute
                local-name
                type-annotation
            #error
    function-result[R]:
        choice
            sequence
                '->'
                *
                    attribute
                type
            sequence
                ':'
                *
                    attribute
                type
            sequence
                '->'
                #error
            sequence
                ':'
                #error
    external-name[R]:
        name
    local-name[R]:
        name
    default-argument-clause[R]:
        sequence
            '='
            expression
    type-annotation[R]:
        choice
            sequence
                ':'
                *
                    attribute
                ?
                    sequence
                        choice
                            '__owned'
                            '__shared'
                        not
                            more
                ?
                    'inout'
                type
            sequence
                ':'
                *
                    attribute
                ?
                    sequence
                        choice
                            '__owned'
                            '__shared'
                        not
                            more
                ?
                    'inout'
                #error
            sequence
                ':'
                #error
    function-body[R]:
        code-block
    initializer-declaration[R]:
        sequence
            initializer-head
            ?
                generic-parameter-clause
            parameter-clause
            ?
                maythrow
            ?
                generic-where-clause
            ?
                initializer-body
    initializer-head[R]:
        choice
            sequence
                full-prefix
                'init'
                not
                    more
                ?
                    choice
                        '?'
                        '!'
            sequence
                full-prefix
                'init'
                not
                    more
                #error
    initializer-body[R]:
        code-block
    operator-declaration[R]:
        choice
            prefix-operator-declaration
            postfix-operator-declaration
            infix-operator-declaration
    prefix-operator-declaration[R]:
        sequence
            'prefix'
            'operator'
            _
            operator
            ?
                sequence
                    ':'
                    operator-restrictions
    postfix-operator-declaration[R]:
        sequence
            'postfix'
            'operator'
            _
            operator
            ?
                sequence
                    ':'
                    operator-restrictions
    infix-operator-declaration[R]:
        sequence
            'infix'
            'operator'
            _
            operator
            ?
                infix-operator-group
    infix-operator-group[R]:
        sequence
            ':'
            precedence-group-name
            ?
                sequence
                    ','
                    operator-restrictions
    operator-restrictions[R]:
        sequence
            operator-restriction
            *
                sequence
                    ','
                    operator-restriction
    operator-restriction[R]:
        type-identifier
    precedence-group-declaration[R]:
        sequence
            'precedencegroup'
            precedence-group-name
            precedence-group-body
    precedence-group-body[R]:
        sequence
            '{'
            *
                precedence-group-attribute
            '}'
    precedence-group-attribute[R]:
        choice
            precedence-group-relation
            precedence-group-assignment
            precedence-group-associativity
    precedence-group-relation[R]:
        sequence
            choice
                'higherThan'
                'lowerThan'
            ':'
            precedence-group-names
    precedence-group-assignment[R]:
        sequence
            'assignment'
            ':'
            boolean-literal
    precedence-group-associativity[R]:
        sequence
            'associativity'
            ':'
            choice
                'left'
                'right'
                'none'
    precedence-group-names[R]:
        sequence
            precedence-group-name
            *
                sequence
                    ','
                    precedence-group-name
    precedence-group-name[R]:
        name
    protocol-declaration[R]:
        sequence
            access-prefix
            'protocol'
            protocol-name
            ?
                type-inheritance-clause
            ?
                generic-where-clause
            protocol-body
    protocol-name[R]:
        name
    protocol-body[R]:
        choice
            sequence
                '{'
                ?
                    protocol-members
                '}'
            sequence
                '{'
                #error
    protocol-members[R]:
        +
            protocol-member
    protocol-member[R]:
        choice
            protocol-member-declaration
            compiler-control-statement
    protocol-member-declaration[R]:
        choice
            protocol-property-declaration
            protocol-method-declaration
            protocol-initializer-declaration
            protocol-subscript-declaration
            protocol-associated-type-declaration
            typealias-declaration
    protocol-property-declaration[R]:
        sequence
            variable-declaration-head
            variable-name
            type-annotation
            getter-setter-keyword-block
    protocol-method-declaration[R]:
        sequence
            function-head
            function-name
            ?
                generic-parameter-clause
            function-signature
            ?
                generic-where-clause
    protocol-initializer-declaration[R]:
        sequence
            initializer-head
            ?
                generic-parameter-clause
            parameter-clause
            ?
                maythrow
            ?
                generic-where-clause
    protocol-subscript-declaration[R]:
        sequence
            subscript-head
            subscript-result
            ?
                generic-where-clause
            getter-setter-keyword-block
    protocol-associated-type-declaration[R]:
        sequence
            access-prefix
            ?
                'override'
            'associatedtype'
            typealias-name
            ?
                type-inheritance-clause
            ?
                typealias-assignment
            ?
                generic-where-clause
    struct-declaration[R]:
        sequence
            access-prefix
            'struct'
            struct-name
            ?
                generic-parameter-clause
            ?
                type-inheritance-clause
            ?
                generic-where-clause
            struct-body
    struct-name[R]:
        name
    struct-body[R]:
        choice
            sequence
                '{'
                *
                    struct-member
                '}'
            sequence
                '{'
                #error
    struct-member[R]:
        choice
            declaration
            compiler-control-statement
            sequence
                not
                    '}'
                #error
    subscript-declaration[R]:
        choice
            sequence
                subscript-head
                subscript-result
                ?
                    generic-where-clause
                getter-setter-block
            sequence
                subscript-head
                subscript-result
                ?
                    generic-where-clause
                getter-setter-keyword-block
    subscript-head[R]:
        sequence
            full-prefix
            'subscript'
            ?
                generic-parameter-clause
            parameter-clause
    subscript-result[R]:
        sequence
            '->'
            *
                attribute
            type
    typealias-declaration[R]:
        choice
            sequence
                access-prefix
                'typealias'
                typealias-name
                ?
                    generic-parameter-clause
                typealias-assignment
                ?
                    generic-where-clause
            sequence
                access-prefix
                'typealias'
                #error
    typealias-name[R]:
        name
    typealias-assignment[R]:
        sequence
            '='
            type
    variable-declaration[R]:
        choice
            sequence
                variable-declaration-head
                variable-name
                type-annotation
                getter-setter-block
            sequence
                variable-declaration-head
                variable-name
                type-annotation
                getter-setter-keyword-block
            sequence
                variable-declaration-head
                variable-name
                type-annotation
                initializer
                willSet-didSet-block
            sequence
                variable-declaration-head
                variable-name
                type-annotation
                willSet-didSet-block
            sequence
                variable-declaration-head
                variable-name
                initializer
                willSet-didSet-block
            sequence
                variable-declaration-head
                pattern-initializer-list
            sequence
                variable-declaration-head
                #error
    variable-declaration-head[R]:
        sequence
            full-prefix
            'var'
    variable-name[R]:
        name
    getter-setter-block[R]:
        choice
            sequence
                '{'
                getter-clause
                ?
                    setter-clause
                ?
                    special-modify-clause
                '}'
            sequence
                '{'
                setter-clause
                getter-clause
                '}'
            code-block
    getter-clause[R]:
        sequence
            mutation-prefix
            'get'
            ?
                code-block
    special-modify-clause[R]:
        sequence
            mutation-prefix
            '_modify'
            ?
                code-block
    setter-clause[R]:
        sequence
            mutation-prefix
            'set'
            ?
                setter-name
            ?
                code-block
    setter-name[R]:
        sequence
            '('
            name
            ')'
    getter-setter-keyword-block[R]:
        choice
            sequence
                '{'
                getter-keyword-clause
                ?
                    setter-keyword-clause
                '}'
            sequence
                '{'
                setter-keyword-clause
                getter-keyword-clause
                '}'
    getter-keyword-clause[R]:
        sequence
            mutation-prefix
            'get'
    setter-keyword-clause[R]:
        sequence
            mutation-prefix
            'set'
    willSet-didSet-block[R]:
        choice
            sequence
                '{'
                willSet-clause
                ?
                    didSet-clause
                '}'
            sequence
                '{'
                didSet-clause
                ?
                    willSet-clause
                '}'
    willSet-clause[R]:
        sequence
            *
                attribute
            'willSet'
            ?
                setter-name
            code-block
    didSet-clause[R]:
        sequence
            *
                attribute
            'didSet'
            ?
                setter-name
            code-block
    declaration[R]:
        choice
            import-declaration
            constant-declaration
            variable-declaration
            typealias-declaration
            function-declaration
            enum-declaration
            struct-declaration
            class-declaration
            protocol-declaration
            initializer-declaration
            deinitializer-declaration
            extension-declaration
            subscript-declaration
            operator-declaration
            precedence-group-declaration
    import-declaration[R]:
        sequence
            *
                attribute
            'import'
            ?
                import-kind
            import-path
    import-kind[R]:
        choice
            'typealias'
            'struct'
            'class'
            'enum'
            'protocol'
            'let'
            'var'
            'func'
    import-path[R]:
        sequence
            import-path-identifier
            *
                sequence
                    '.'
                    import-path-identifier
    import-path-identifier[R]:
        choice
            name
            operator
    class-declaration[R]:
        sequence
            class-head
            class-name
            ?
                generic-parameter-clause
            ?
                type-inheritance-clause
            ?
                generic-where-clause
            class-body
    class-head[R]:
        choice
            sequence
                *
                    attribute
                ?
                    access-level-modifier
                ?
                    'final'
                'class'
            sequence
                *
                    attribute
                'final'
                ?
                    access-level-modifier
                'class'
    class-name[R]:
        name
    class-body[R]:
        sequence
            '{'
            ?
                class-members
            '}'
    class-members[R]:
        +
            class-member
    class-member[R]:
        choice
            declaration
            compiler-control-statement
    deinitializer-declaration[R]:
        sequence
            *
                attribute
            'deinit'
            code-block
    expression[R]:
        sequence
            ?
                try-operator
            prefix-expression
            ?
                binary-expressions
    binary-expressions[R]:
        +
            binary-expression
    binary-expression[R]:
        choice
            sequence
                assignment-operator
                ?
                    try-operator
                prefix-expression
            sequence
                conditional-operator
                ?
                    try-operator
                prefix-expression
            sequence
                binary-operator
                prefix-expression
            type-casting-operator
    prefix-expression[R]:
        choice
            sequence
                ?
                    prefix-operator
                postfix-expression
            in-out-expression
    in-out-expression[R]:
        sequence
            '&'
            name
    postfix-expression[R]:
        sequence
            primary-expression
            *
                postfix-appendix
    postfix-appendix[R]:
        choice
            postfix-operator
            function-call
            initializer-appendix
            explicit-member
            postfix-self
            subscript
            forced-value
            optional-chaining
    function-call[R]:
        choice
            sequence
                function-call-argument-clause
                trailing-closures
            function-call-argument-clause
            trailing-closures
    function-call-argument-clause[R]:
        choice
            sequence
                '('
                ?
                    function-call-argument-list
                ')'
            sequence
                '('
                #error
    function-call-argument-list[R]:
        sequence
            function-call-argument
            *
                sequence
                    ','
                    function-call-argument
    function-call-argument[R]:
        sequence
            ?
                sequence
                    name
                    ':'
            choice
                expression
                operator-name
    trailing-closures[R]:
        choice
            sequence
                ':'
                and
                    closure-expression
                closure-expression
                ?
                    labeled-trailing-closures
            sequence
                ':'
                and
                    '{'
                #error
    labeled-trailing-closures[R]:
        sequence
            labeled-trailing-closure
            *
                labeled-trailing-closure
    labeled-trailing-closure[R]:
        sequence
            name
            ':'
            closure-expression
    initializer-appendix[R]:
        sequence
            '.'
            'init'
            ?
                argument-name-clause
    argument-name-clause[R]:
        sequence
            '('
            argument-names
            ')'
    argument-names[R]:
        +
            argument-name
    argument-name[R]:
        sequence
            name
            ':'
    explicit-member[R]:
        choice
            sequence
                '.'
                decimal-digits
            sequence
                '.'
                name
                argument-name-clause
            sequence
                '.'
                name
                ?
                    generic-argument-clause
    postfix-self[R]:
        sequence
            '.'
            'self'
    subscript[R]:
        sequence
            '['
            function-call-argument-list
            ']'
    forced-value[R]:
        match "!"
    optional-chaining[R]:
        match "?"
    primary-expression[R]:
        choice
            primary-name
            literal-expression
            self-expression
            superclass-expression
            closure-expression
            clamped-expression
            tuple-expression
            implicit-member-expression
            wildcard-expression
            key-path-expression
            selector-expression
            key-path-string-expression
    primary-name[R]:
        sequence
            name
            ?
                generic-argument-clause
    literal-expression[R]:
        choice
            literal
            array-literal
            dictionary-literal
            playground-literal
            '#file'
            '#fileID'
            '#filePath'
            '#line'
            '#column'
            '#function'
            '#dsohandle'
    literal[R]:
        choice
            numeric-literal
            string-literal
            boolean-literal
            nil-literal
    numeric-literal[R]:
        sequence
            ?
                '-'
            _
            choice
                floating-point-literal
                integer-literal
    boolean-literal[R]:
        choice
            'true'
            'false'
    nil-literal[R]:
        'nil'
    array-literal[R]:
        choice
            sequence
                '['
                array-literal-items
                ']'
            sequence
                '['
                ']'
    array-literal-items[R]:
        sequence
            array-literal-item
            *
                sequence
                    ','
                    array-literal-item
            ?
                ','
    array-literal-item[R]:
        expression
    dictionary-literal[R]:
        choice
            sequence
                '['
                dictionary-literal-items
                ']'
            sequence
                '['
                ':'
                ']'
    dictionary-literal-items[R]:
        sequence
            dictionary-literal-item
            *
                sequence
                    ','
                    dictionary-literal-item
            ?
                ','
    dictionary-literal-item[R]:
        sequence
            expression
            ':'
            expression
    playground-literal[R]:
        choice
            sequence
                '#colorLiteral'
                '('
                'red'
                ':'
                expression
                ','
                'green'
                ':'
                expression
                ','
                'blue'
                ':'
                expression
                ','
                'alpha'
                ':'
                expression
                ')'
            sequence
                '#fileLiteral'
                '('
                'resourceName'
                ':'
                expression
                ')'
            sequence
                '#imageLiteral'
                '('
                'resourceName'
                ':'
                expression
                ')'
    self-expression[R]:
        choice
            sequence
                'self'
                '.'
                'init'
                not
                    more
            sequence
                'self'
                '.'
                name
            sequence
                'self'
                '['
                function-call-argument-list
                ']'
            sequence
                'self'
                not
                    more
    superclass-expression[R]:
        choice
            sequence
                'super'
                '.'
                'init'
                not
                    more
            sequence
                'super'
                '.'
                name
            sequence
                'super'
                '['
                function-call-argument-list
                ']'
    closure-expression[R]:
        sequence
            '{'
            ?
                closure-signature
            *
                statement
            '}'
    closure-signature[R]:
        choice
            sequence
                ?
                    capture-list
                closure-parameter-clause
                ?
                    'throws'
                ?
                    function-result
                'in'
            sequence
                capture-list
                'in'
    closure-parameter-clause[R]:
        choice
            sequence
                '('
                ')'
            sequence
                '('
                closure-parameter-list
                ')'
            identifier-list
    closure-parameter-list[R]:
        sequence
            closure-parameter
            *
                sequence
                    ','
                    closure-parameter
    closure-parameter[R]:
        choice
            sequence
                closure-parameter-name
                type-annotation
                '...'
            sequence
                closure-parameter-name
                type-annotation
            closure-parameter-name
    closure-parameter-name[R]:
        name
    identifier-list[R]:
        sequence
            name
            *
                sequence
                    ','
                    name
    capture-list[R]:
        sequence
            '['
            capture-list-items
            ']'
    capture-list-items[R]:
        sequence
            capture-list-item
            *
                sequence
                    ','
                    capture-list-item
    capture-list-item[R]:
        sequence
            ?
                capture-specifier
            expression
    capture-specifier[R]:
        choice
            'weak'
            sequence
                'unowned'
                ?
                    sequence
                        '('
                        choice
                            'safe'
                            'unsafe'
                        ')'
    clamped-expression[R]:
        sequence
            '('
            expression
            ')'
    tuple-expression[R]:
        choice
            sequence
                '('
                ')'
            sequence
                '('
                tuple-element-list
                ')'
    tuple-element-list[R]:
        sequence
            tuple-element
            +
                sequence
                    ','
                    tuple-element
    tuple-element[R]:
        sequence
            ?
                sequence
                    name
                    ':'
            expression
    implicit-member-expression[R]:
        sequence
            '.'
            name
    wildcard-expression[R]:
        sequence
            '_'
            not
                more
    key-path-expression[R]:
        sequence
            '\\\\'
            ?
                type
            '.'
            key-path-components
    key-path-components[R]:
        sequence
            key-path-component
            ?
                sequence
                    '.'
                    key-path-component
    key-path-component[R]:
        choice
            sequence
                name
                key-path-postfixes
            key-path-postfixes
            name
    key-path-postfixes[R]:
        +
            key-path-postfix
    key-path-postfix[R]:
        choice
            '?'
            '!'
            'self'
            sequence
                '['
                function-call-argument-list
                ']'
    selector-expression[R]:
        sequence
            '#selector'
            '('
            ?
                choice
                    'getter:'
                    'setter:'
            expression
            ')'
    key-path-string-expression[R]:
        sequence
            '#keyPath'
            '('
            expression
            ')'
    try-operator[R]:
        sequence
            'try'
            ?
                choice
                    '?'
                    '!'
    assignment-operator[R]:
        '='
    type-casting-operator[R]:
        choice
            sequence
                'is'
                not
                    more
                type
            sequence
                'as'
                not
                    more
                ?
                    choice
                        '?'
                        '!'
                type
            sequence
                choice
                    'is'
                    'as'
                not
                    more
                #error
    conditional-operator[R]:
        sequence
            _
            before
                space-before
            '?'
            and
                space-after
            expression
            ':'
    binary-operator[R]:
        choice
            sequence
                _
                before
                    space-before
                operator
                and
                    space-after
            sequence
                operator
                not
                    space-after
    prefix-operator[R]:
        sequence
            _
            before
                space-before
            operator
            not
                space-after
    postfix-operator[R]:
        choice
            sequence
                operator
                and
                    space-after
            sequence
                operator
                and
                    match "."
    operator-name[R]:
        sequence
            _
            operator
    operator[R]:
        choice
            sequence
                operator-head
                *
                    operator-character
            sequence
                dot-operator-head
                +
                    dot-operator-character
    operator-head[R]:
        match '/' or '=' or '-' or '+' or '!' or '*' or '%' or '<' or '>' or '&' or '|' or '^' or '~' or '?'
    operator-character[R]:
        operator-head
    dot-operator-head[R]:
        match "."
    dot-operator-character[R]:
        choice
            match "."
            operator-character
    puncts[R]:
        match ',' or ';' or ':'
    space-before[R]:
        choice
            single-whitespace
            puncts
            match "("
            match "["
            match "{"
    space-after[R]:
        choice
            single-whitespace
            puncts
            match ")"
            match "]"
            match "}"
    generic-parameter-clause[R]:
        choice
            sequence
                '<'
                generic-parameters
                '>'
            sequence
                '<'
                #error
    generic-parameters[R]:
        sequence
            generic-parameter
            *
                sequence
                    ','
                    generic-parameter
    generic-parameter[R]:
        choice
            sequence
                type-name
                ':'
                protocol-composition-type
            sequence
                type-name
                ':'
                type-identifier
            type-name
            #error
    generic-where-clause[R]:
        choice
            sequence
                'where'
                requirement-list
            sequence
                'where'
                #error
            sequence
                and
                    'where'
                #error
    requirement-list[R]:
        sequence
            requirement
            *
                sequence
                    ','
                    requirement
    requirement[R]:
        choice
            sequence
                type-identifier
                ':'
                protocol-composition-type
            sequence
                type-identifier
                ':'
                type-identifier
            sequence
                type-identifier
                '=='
                type
    generic-argument-clause[R]:
        sequence
            '<'
            generic-arguments
            '>'
    generic-arguments[R]:
        sequence
            generic-argument
            *
                sequence
                    ','
                    generic-argument
    generic-argument[R]:
        type
    string-literal[T]:
        choice
            interpolated-string-literal
            static-string-literal
    static-string-literal[T]:
        choice
            sequence
                multiline-string-literal-opening-delimiter
                ?
                    multiline-quoted-text
                multiline-string-literal-closing-delimiter
            sequence
                string-literal-opening-delimiter
                ?
                    quoted-text
                string-literal-closing-delimiter
    interpolated-string-literal[TF]:
        choice
            sequence
                multiline-string-literal-opening-delimiter
                ?
                    multiline-interpolated-text
                multiline-string-literal-closing-delimiter
            sequence
                string-literal-opening-delimiter
                ?
                    interpolated-text
                string-literal-closing-delimiter
    quoted-text[TF]:
        +
            quoted-text-item
    quoted-text-item[TF]:
        choice
            escaped-character
            sequence
                not
                    choice
                        match "\""
                        match "\\"
                        line-break-character
                match ANY
    multiline-quoted-text[TF]:
        +
            multiline-quoted-text-item
    multiline-quoted-text-item[TF]:
        choice
            escaped-character
            escaped-newline
            sequence
                not
                    choice
                        match "\\"
                        multiline-string-literal-closing-delimiter
                match ANY
    interpolated-text[TF]:
        +
            interpolated-text-item
    interpolated-text-item[TF]:
        choice
            sequence
                match "\\"
                match "("
                expression
                ')'
            quoted-text-item
    multiline-interpolated-text[TF]:
        +
            multiline-interpolated-text-item
    multiline-interpolated-text-item[TF]:
        choice
            sequence
                match "\\"
                match "("
                expression
                ')'
            multiline-quoted-text-item
    escaped-character[TF]:
        choice
            sequence
                escape-sequence
                match "0"
            sequence
                escape-sequence
                match "\\"
            sequence
                escape-sequence
                match "t"
            sequence
                escape-sequence
                match "n"
            sequence
                escape-sequence
                match "r"
            sequence
                escape-sequence
                match "\""
            sequence
                escape-sequence
                match "\'"
            sequence
                escape-sequence
                match "u"
                match "{"
                hex-digit
                ?
                    hex-digit
                ?
                    hex-digit
                ?
                    hex-digit
                ?
                    hex-digit
                ?
                    hex-digit
                ?
                    hex-digit
                ?
                    hex-digit
                match "}"
    escape-sequence[TF]:
        sequence
            match "\\"
            ?
                extended-string-literal-delimiter
    escaped-newline[TF]:
        sequence
            escape-sequence
            ?
                inline-spaces
            line-break
    string-literal-opening-delimiter[TF]:
        sequence
            _
            ?
                extended-string-literal-delimiter
            match "\""
    string-literal-closing-delimiter[TF]:
        sequence
            match "\""
            ?
                extended-string-literal-delimiter
    multiline-string-literal-opening-delimiter[TF]:
        sequence
            _
            ?
                extended-string-literal-delimiter
            match "\""
            match "\""
            match "\""
    multiline-string-literal-closing-delimiter[TF]:
        sequence
            match "\""
            match "\""
            match "\""
            ?
                extended-string-literal-delimiter
    extended-string-literal-delimiter[TF]:
        +
            match "#"
    name[T]:
        sequence
            _
            identifier
    identifier[TF]:
        choice
            sequence
                identifier-head
                *
                    identifier-character
            sequence
                match "`"
                identifier-head
                *
                    identifier-character
                match "`"
            implicit-parameter-name
            property-wrapper-projection
    identifier-head[TF]:
        choice
            match "a" .. "z"
            match "A" .. "Z"
            match "_"
    identifier-character[TF]:
        choice
            identifier-head
            match "0" .. "9"
    implicit-parameter-name[TF]:
        sequence
            match "$"
            decimal-digits
    property-wrapper-projection[TF]:
        sequence
            match "$"
            +
                identifier-character
    more[T]:
        identifier-character
    integer-literal[T]:
        choice
            binary-literal
            octal-literal
            hexadecimal-literal
            decimal-literal
    binary-literal[TF]:
        sequence
            match "0b"
            binary-digit
            *
                binary-literal-character
    binary-digit[TF]:
        match '0' or '1'
    binary-literal-character[TF]:
        choice
            binary-digit
            match "_"
    octal-literal[TF]:
        sequence
            match "0o"
            octal-digit
            *
                octal-literal-character
    octal-digit[TF]:
        match "0" .. "7"
    octal-literal-character[TF]:
        choice
            octal-digit
            match "_"
    decimal-literal[TF]:
        sequence
            decimal-digit
            *
                decimal-literal-character
    nonzero-decimal-literal[T]:
        sequence
            *
                match "0"
            decimal-digit-except-0
            *
                decimal-digit
    decimal-digit[TF]:
        match "0" .. "9"
    decimal-digit-except-0[TF]:
        match "1" .. "9"
    decimal-literal-character[TF]:
        choice
            decimal-digit
            match "_"
    hexadecimal-literal[TF]:
        sequence
            match "0x"
            hexadecimal-digit
            *
                hexadecimal-literal-character
    hexadecimal-digit[TF]:
        choice
            match "0" .. "9"
            match "a" .. "f"
            match "A" .. "F"
    hex-digit[TF]:
        hexadecimal-digit
    hexadecimal-literal-character[TF]:
        choice
            hexadecimal-digit
            match "_"
    floating-point-literal[T]:
        choice
            sequence
                hexadecimal-literal
                ?
                    hexadecimal-fraction
                ?
                    hexadecimal-exponent
            sequence
                decimal-literal
                decimal-fraction
                decimal-exponent
            sequence
                decimal-literal
                decimal-exponent
            sequence
                decimal-fraction
                decimal-exponent
            decimal-fraction
    decimal-fraction[TF]:
        sequence
            match "."
            decimal-literal
    decimal-exponent[TF]:
        sequence
            match 'e' or 'E'
            ?
                match '+' or '-'
            decimal-literal
    hexadecimal-fraction[TF]:
        sequence
            match "."
            hexadecimal-digit
            *
                hexadecimal-literal-character
    hexadecimal-exponent[TF]:
        sequence
            match 'p' or 'P'
            ?
                match '+' or '-'
            decimal-literal
    decimal-digits[T]:
        sequence
            _
            +
                match "0" .. "9"
    pattern[R]:
        choice
            sequence
                primary-pattern
                *
                    pattern-postfix
            sequence
                primary-pattern
                and
                    choice
                        '?'
                        '.'
                        'as'
                #error
    primary-pattern[R]:
        choice
            wildcard-pattern
            value-binding-pattern
            tuple-pattern
            enum-case-pattern
            is-pattern
            type-identifier
            expression
    pattern-postfix[R]:
        choice
            pattern-optional
            pattern-case
            pattern-as
    pattern-optional[R]:
        '?'
    pattern-case[R]:
        sequence
            '.'
            enum-case-name
            tuple-pattern
    pattern-as[R]:
        choice
            sequence
                'as'
                type
            sequence
                'as'
                #error
    wildcard-pattern[R]:
        sequence
            '_'
            not
                more
    value-binding-pattern[R]:
        choice
            sequence
                'var'
                pattern
            sequence
                'let'
                pattern
            sequence
                'var'
                #error
            sequence
                'let'
                #error
    tuple-pattern[R]:
        choice
            sequence
                '('
                ')'
            sequence
                '('
                tuple-pattern-element-list
                ')'
            sequence
                '('
                #error
    tuple-pattern-element-list[R]:
        sequence
            tuple-pattern-element
            *
                sequence
                    ','
                    tuple-pattern-element
    tuple-pattern-element[R]:
        sequence
            ?
                sequence
                    name
                    ':'
            pattern
    enum-case-pattern[R]:
        sequence
            ?
                type-identifier
            '.'
            enum-case-name
            ?
                tuple-pattern
    is-pattern[R]:
        sequence
            'is'
            type
    condition-list[R]:
        sequence
            condition
            *
                sequence
                    ','
                    condition
    condition[R]:
        choice
            available-condition
            case-condition
            optional-binding-condition
            expression
    case-condition[R]:
        sequence
            'case'
            pattern
            initializer
    optional-binding-condition[R]:
        choice
            sequence
                'let'
                pattern
                ?
                    type-annotation
                initializer
            sequence
                'var'
                pattern
                ?
                    type-annotation
                initializer
    available-condition[R]:
        sequence
            '#available'
            '('
            availability-arguments
            ')'
    availability-arguments[R]:
        sequence
            availability-argument
            *
                sequence
                    ','
                    availability-argument
    availability-argument[R]:
        choice
            sequence
                platform-name
                platform-version
            '*'
    platform-name[R]:
        choice
            'iOS'
            'iOSApplicationExtension'
            'macOS'
            'macOSApplicationExtension'
            'macCatalyst'
            'macCatalystApplicationExtension'
            'watchOS'
            'tvOS'
    platform-version[R]:
        sequence
            decimal-digits
            ?
                sequence
                    '.'
                    decimal-digits
                    ?
                        sequence
                            '.'
                            decimal-digits
    switch-statement[R]:
        sequence
            'switch'
            expression
            switch-body
    switch-body[R]:
        choice
            sequence
                '{'
                '}'
            sequence
                '{'
                switch-cases
                '}'
            sequence
                '{'
                #error
    switch-cases[R]:
        +
            switch-case
    switch-case[R]:
        choice
            sequence
                case-label
                +
                    statement
            sequence
                default-label
                +
                    statement
            conditional-switch-case
    case-label[R]:
        choice
            sequence
                *
                    attribute
                'case'
                case-item-list
                ':'
            sequence
                *
                    attribute
                'case'
                #error
    case-item-list[R]:
        choice
            sequence
                case-item
                *
                    sequence
                        ','
                        case-item
                and
                    ':'
            sequence
                case-item
                +
                    sequence
                        ','
                        case-item
                not
                    ':'
                #error
            sequence
                case-item
                #error
    case-item[R]:
        sequence
            pattern
            ?
                where-clause
    default-label[R]:
        sequence
            *
                attribute
            'default'
            ':'
    conditional-switch-case[R]:
        sequence
            switch-if-directive-clause
            ?
                switch-elseif-directive-clauses
            ?
                switch-else-directive-clause
            endif-directive
    switch-if-directive-clause[R]:
        sequence
            if-directive
            compilation-condition
            ?
                switch-cases
    switch-elseif-directive-clauses[R]:
        +
            elseif-directive-clause
    switch-else-directive-clause[R]:
        sequence
            else-directive
            ?
                switch-cases
    statement[R]:
        choice
            sequence
                ?
                    statement-label
                famous-statement
                ?
                    ';'
            compiler-control-statement
    famous-statement[R]:
        choice
            break-statement
            continue-statement
            fallthrough-statement
            return-statement
            throw-statement
            for-in-statement
            while-statement
            repeat-while-statement
            if-statement
            guard-statement
            switch-statement
            do-statement
            defer-statement
            declaration
            sequence
                not
                    in-switch
                expression
            sequence
                '{'
                #error
    code-block[R]:
        choice
            sequence
                '{'
                *
                    statement
                '}'
            sequence
                '{'
                #error
    break-statement[R]:
        choice
            sequence
                'break'
                not
                    in-switch
                ?
                    label-name
            sequence
                'break'
                not
                    in-switch
                #error
    continue-statement[R]:
        choice
            sequence
                'continue'
                not
                    in-switch
                ?
                    label-name
            sequence
                'continue'
                not
                    in-switch
                #error
    fallthrough-statement[R]:
        'fallthrough'
    return-statement[R]:
        choice
            sequence
                'return'
                not
                    in-switch
                ?
                    expression
            sequence
                'return'
                not
                    in-switch
                #error
    throw-statement[R]:
        choice
            sequence
                'throw'
                expression
            sequence
                'throw'
                #error
    for-in-statement[R]:
        sequence
            'for'
            ?
                'case'
            pattern
            'in'
            expression
            ?
                where-clause
            code-block
    while-statement[R]:
        choice
            sequence
                'while'
                condition-list
                code-block
            sequence
                'while'
                condition-list
                #error
            sequence
                'while'
                #error
    repeat-while-statement[R]:
        sequence
            'repeat'
            code-block
            'while'
            expression
    if-statement[R]:
        choice
            sequence
                'if'
                condition-list
                code-block
                ?
                    else-clause
            sequence
                'if'
                condition-list
                #error
            sequence
                'if'
                #error
    else-clause[R]:
        choice
            sequence
                'else'
                code-block
            sequence
                'else'
                if-statement
            sequence
                and
                    'else'
                #error
    guard-statement[R]:
        sequence
            'guard'
            condition-list
            'else'
            code-block
    do-statement[R]:
        sequence
            'do'
            code-block
            *
                catch-clause
    catch-clause[R]:
        sequence
            'catch'
            ?
                catch-pattern-list
            code-block
    catch-pattern-list[R]:
        sequence
            catch-pattern
            *
                sequence
                    ','
                    catch-pattern
    catch-pattern[R]:
        sequence
            pattern
            ?
                where-clause
    defer-statement[R]:
        sequence
            'defer'
            code-block
    statement-label[R]:
        sequence
            label-name
            ':'
    label-name[R]:
        name
    in-switch[R]:
        sequence
            choice
                'case'
                'default'
            not
                more
    where-clause[R]:
        sequence
            'where'
            where-expression
    where-expression[R]:
        expression
    tuple-type[R]:
        choice
            sequence
                '('
                ')'
            sequence
                '('
                tuple-type-element-list
                ')'
    tuple-type-element-list[R]:
        choice
            sequence
                tuple-type-element
                +
                    sequence
                        ','
                        tuple-type-element
            sequence
                tuple-type-element
                ','
                #error
    tuple-type-element[R]:
        choice
            sequence
                element-name
                type-annotation
            type
    element-name[R]:
        name
    enum-tuple-type[R]:
        choice
            tuple-type
            sequence
                '('
                tuple-type-element
                ')'
    type[R]:
        sequence
            primary-type
            *
                type-postfix
    primary-type[R]:
        choice
            protocol-composition-type
            type-identifier
            function-type
            array-type
            dictionary-type
            any-type
            self-type
            opaque-type
            tuple-type
            clamped-type
    clamped-type[R]:
        sequence
            '('
            type
            ')'
    type-postfix[R]:
        choice
            type-optional
            type-unwrap
            type-metatype
    type-optional[R]:
        match "?"
    type-unwrap[R]:
        match "!"
    type-metatype[R]:
        sequence
            '.'
            choice
                sequence
                    'Type'
                    not
                        more
                sequence
                    'Protocol'
                    not
                        more
    function-type[R]:
        sequence
            *
                attribute
            function-type-argument-clause
            ?
                'throws'
            '->'
            type
    function-type-argument-clause[R]:
        choice
            sequence
                '('
                ')'
            sequence
                '('
                function-type-argument-list
                ?
                    '...'
                ')'
    function-type-argument-list[R]:
        sequence
            function-type-argument
            *
                sequence
                    ','
                    function-type-argument
    function-type-argument[R]:
        choice
            sequence
                name
                argument-label
                type-annotation
            sequence
                argument-label
                type-annotation
            sequence
                *
                    attribute
                ?
                    'inout'
                type
    argument-label[R]:
        name
    array-type[R]:
        sequence
            '['
            type
            ']'
    dictionary-type[R]:
        sequence
            '['
            type
            ':'
            type
            ']'
    type-identifier[R]:
        sequence
            type-identifier-part
            *
                sequence
                    '.'
                    type-identifier-part
    type-identifier-part[R]:
        sequence
            type-name
            ?
                generic-argument-clause
    protocol-composition-type[R]:
        sequence
            type-identifier
            +
                sequence
                    '&'
                    not
                        operator-character
                    type-identifier
    opaque-type[R]:
        sequence
            'some'
            not
                more
            type
    any-type[R]:
        sequence
            'Any'
            not
                more
    self-type[R]:
        sequence
            'Self'
            not
                more
    type-name[R]:
        name
    type-inheritance-clause[R]:
        sequence
            ':'
            type-inheritance-list
    type-inheritance-list[R]:
        sequence
            type-identifier
            *
                sequence
                    ','
                    type-identifier
    whitespace[TF]:
        whitespace-item
    single-whitespace[T]:
        choice
            line-break-character
            inline-space
            match "\u0000"
            match "\v"
            match "\f"
    whitespace-item[TF]:
        choice
            line-break
            inline-space
            comment
            multiline-comment
            match "\u0000"
            match "\v"
            match "\f"
    line-break[TF]:
        choice
            match "\n"
            match "\r\n"
            match "\r"
    line-break-character[TF]:
        match '\n' or '\r'
    inline-spaces[TF]:
        +
            inline-space
    inline-space[TF]:
        match '\t' or ' '
    comment[TF]:
        sequence
            match "/"
            match "/"
            comment-text
            line-break
    comment-text[TF]:
        *
            comment-text-item
    comment-text-item[TF]:
        sequence
            not
                line-break-character
            match ANY
    multiline-comment[TF]:
        sequence
            match "/"
            match "*"
            multiline-comment-text
            match "*"
            match "/"
    multiline-comment-text[TF]:
        *
            multiline-comment-text-item
    multiline-comment-text-item[TF]:
        choice
            multiline-comment
            sequence
                not
                    choice
                        match "/*"
                        match "*/"
                match ANY

keywords:
    _
    __always
    __consuming
    __owned
    __shared
    _modify
    alpha
    Android
    Any
    arch
    arm
    arm64
    as
    assignment
    associatedtype
    associativity
    block
    blue
    break
    c
    canImport
    case
    catch
    class
    compiler
    continue
    convenience
    default
    defer
    deinit
    didSet
    do
    dynamic
    else
    enum
    extension
    fallthrough
    false
    fileprivate
    final
    for
    func
    get
    green
    guard
    higherThan
    i386
    if
    import
    in
    indirect
    infix
    init
    inout
    internal
    iOS
    iOSApplicationExtension
    is
    lazy
    left
    let
    Linux
    lowerThan
    macCatalyst
    macCatalystApplicationExtension
    macOS
    macOSApplicationExtension
    mutating
    never
    nil
    none
    nonmutating
    of
    open
    OpenBSD
    operator
    optional
    os
    override
    postfix
    powerpc64
    precedencegroup
    prefix
    private
    protocol
    Protocol
    public
    readnone
    readonly
    red
    releasenone
    repeat
    required
    resourceName
    rethrows
    return
    right
    s390x
    safe
    self
    Self
    set
    simulator
    some
    static
    struct
    subscript
    super
    swift
    switch
    targetEnvironment
    thin
    throw
    throws
    true
    try
    tvOS
    Type
    typealias
    unowned
    unsafe
    var
    wasm32
    watchOS
    weak
    where
    while
    willSet
    Windows
    x86_64
