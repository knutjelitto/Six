grammar Six
{
    rules // function-declaration
    {
        function-declaration
            = function-head function-name generic-parameter-clause? function-signature generic-where-clause? function-body?
            / function-head #error("function-declaration")

        function-head
            = full-prefix 'func'

        function-signature
            = parameter-clause maythrow? function-result?

        maythrow
            = ('throws' / 'rethrows')

        function-name
            = name
            / operator-name
            / #error( "function-name" )

        parameter-clause
            : '(' ')'
            | '(' parameter-list ')'
            | #error( "parameter-clause" )

        parameter-list
            = parameter (',' parameter)*

        parameter
            = attribute* external-name local-name type-annotation default-argument-clause
            / attribute* external-name local-name type-annotation '...'
            / attribute* external-name local-name type-annotation
            / attribute* local-name type-annotation default-argument-clause
            / attribute* local-name type-annotation '...'
            / attribute* local-name type-annotation
            / #error("parameter")

        function-result
            : '->' attribute* type
            | ':'  attribute* type
            | '->' #error( "function-result" )
            | ':' #error( "function-result" )

        external-name:
            name

        local-name:
            name

        default-argument-clause:
            '=' expression

        type-annotation
            : ':' attribute* (('__owned'/'__shared') !more)? 'inout'? type
            | ':' attribute* (('__owned'/'__shared') !more)? 'inout'? #error("type-annotation-1")
            | ':' #error("type-annotation-2")

        function-body:
            code-block
    }
}
