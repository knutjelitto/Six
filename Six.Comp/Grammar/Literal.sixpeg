grammar Six
{
    terminals // == Identifier / Literal
    {
        name:
            _ identifier
        
        @flatten
        identifier
            : identifier-head identifier-character*
            | [`] identifier-head identifier-character* [`]
            | implicit-parameter-name
            | property-wrapper-projection

        @fragment
        identifier-head
            = [a-zA-Z_]

        @fragment
        identifier-character
            = identifier-head
            / [0-9]

        @fragment
        implicit-parameter-name
            = [$] decimal-digits

        @fragment
        property-wrapper-projection
            = [$] identifier-character+

        more
            = identifier-character

        integer-literal
            = binary-literal
            / octal-literal
            / hexadecimal-literal
            / decimal-literal

        binary-literal
            = "0b" binary-digit binary-literal-character*

        binary-digit
            = [01]

        binary-literal-character
            = binary-digit
            / [_]

        octal-literal
            = "0o" octal-digit octal-literal-character*

        octal-digit
            = [0-7]

        octal-literal-character
            = octal-digit
            / [_]

        decimal-literal
            = decimal-digit decimal-literal-character*

        nonzero-decimal-literal
            = [0]* decimal-digit-except-0 decimal-digit*

        decimal-digit
            = [0-9]

        decimal-digit-except-0
            = [1-9]

        decimal-literal-character
            = decimal-digit
            / [_]

        hexadecimal-literal
            = "0x" hexadecimal-digit hexadecimal-literal-character*

        hexadecimal-digit
            = [0-9a-fA-F]
        hex-digit
            = hexadecimal-digit

        hexadecimal-literal-character
            = hexadecimal-digit
            / [_]


        floating-point-literal
            : hexadecimal-literal hexadecimal-fraction? hexadecimal-exponent?
            | decimal-literal decimal-fraction decimal-exponent
            | decimal-literal decimal-exponent
            | decimal-fraction decimal-exponent
            | decimal-fraction

        decimal-fraction
            = [.] decimal-literal

        decimal-exponent
            = [eE] [+-]? decimal-literal

        hexadecimal-fraction
            = [.] hexadecimal-digit hexadecimal-literal-character*

        hexadecimal-exponent
            = [pP] [+-]? decimal-literal


        //
        // ad-hoc
        //
        decimal-digits
            = _ [0-9]+
    }
}
