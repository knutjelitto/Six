// ====================================
// == PATTERN
// ====================================

grammar Swift
{
    rules
    {
        pattern
            = primary-pattern pattern-postfix*
            / primary-pattern &('?'/'.'/'as') #error("pattern - pattern-postfix")

        primary-pattern
            = wildcard-pattern
            / value-binding-pattern
            / tuple-pattern
            / enum-case-pattern
            / is-pattern
            / type-identifier
            / expression

        pattern-postfix
            = pattern-optional
            / pattern-case
            / pattern-as

        pattern-optional
            = '?'

        pattern-case
            = '.' enum-case-name tuple-pattern

        pattern-as
            = 'as' type
            / 'as' #error("pattern-as - type")

        wildcard-pattern
            = '_' !more

        value-binding-pattern
            = 'var' pattern
            / 'let' pattern
            / 'var' #error("value-binding-pattern - pattern")
            / 'let' #error("value-binding-pattern - pattern")

        tuple-pattern
            = '(' ')'
            / '(' tuple-pattern-element-list ')'
            / '(' #error("tuple-pattern")

        tuple-pattern-element-list
            = tuple-pattern-element (',' tuple-pattern-element)*

        tuple-pattern-element
            = (name ':')? pattern

        /*
        identifier-pattern
            = name
        */

        enum-case-pattern
            = type-identifier? '.' enum-case-name tuple-pattern?

        /*
        type-casting-pattern
            = is-pattern
            / as-pattern
        */

        is-pattern
            = 'is' type

        /*
        as-pattern
            = pattern 'as' type
        */

        /*
        optional-pattern
            = '.'? identifier-pattern '?'
        */

        /*
        expression-pattern
            = expression
        */
    }
}
