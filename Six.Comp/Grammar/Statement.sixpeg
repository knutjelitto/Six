// ====================================
// == Statement
// ====================================

grammar Six
{
    rules
    {
        statement
            : statement-label? famous-statement ';'?
            | compiler-control-statement

        famous-statement 
            : break-statement
            | continue-statement
            | fallthrough-statement
            | return-statement
            | throw-statement
            | for-in-statement
            | while-statement
            | repeat-while-statement
            | if-statement
            | guard-statement
            | switch-statement
            | do-statement
            | defer-statement
            | declaration
            | !(('case'/'default') !more) expression // follow in switch/case
            | '{' #error("statement")

        code-block
            = '{' statement* '}'
            / '{' #error("code-block")

        fallthrough-statement
            = 'fallthrough'

        throw-statement
            = 'throw' expression
            / 'throw' #error("throw-statement")

        for-in-statement
            = 'for' 'case'? pattern 'in' expression where-clause? code-block

        repeat-while-statement
            = 'repeat' code-block 'while' expression

        // ------------------------------------
        // 'do' statement
        // ------------------------------------

        do-statement
	        = 'do' code-block catch-clause*

        catch-clause
	        = 'catch' catch-pattern-list? code-block

        catch-pattern-list
	        = catch-pattern (',' catch-pattern)*

        catch-pattern
	        = pattern where-clause?

        // ------------------------------------
        // 'defer' statement
        // ------------------------------------

        defer-statement
	        = 'defer' code-block
    
        // ------------------------------------
        // statement-label
        // ------------------------------------

        statement-label
	        = label-name ':'

        label-name
	        = name

        // ------------------------------------
        // Misc
        // ------------------------------------
        where-clause
            = 'where' where-expression

        where-expression
            = expression
    }
}
