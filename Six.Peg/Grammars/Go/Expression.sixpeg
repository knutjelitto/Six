grammar Go
{
	rules
	{
		// ------------------------------------
		// expression
		// ------------------------------------

		Expression
			= PrefixExpr (!line-end binary_op Expression)*

		ExpressionList
			= Expression (',' Expression)*

		PrefixExpr
			= prefix_op PrefixExpr
			/ PostfixExpr

		// ------------------------------------
		// primary-expression
		// ------------------------------------
		PostfixExpr
			= PrimaryExpr Postfix*

		PrimaryExpr
			= Operand
			/ Conversion

		Postfix
			= Selector
			/ Slice
			/ Index
			/ TypeAssertion
			/ Arguments

		Selector
			= '.' identifier

		Slice
			= '[' Expression? ':' Expression? ']'
			/ '[' Expression? ':' Expression ':' Expression ']'

		Index
			= '[' Expression ']'

		TypeAssertion
			= '.' '(' !('type' !more) Type ')'

		Arguments
			= !line-end '(' ( (ExpressionList / (!Expression UType) (',' ExpressionList)? ) '...'? ','? )?')'

		// ------------------------------------
		// conversion
		// ------------------------------------
		Conversion
			= UType '(' Expression ','? ')'

		// ------------------------------------
		// operand
		// ------------------------------------
		Operand
			= BasicLit
			/ FunctionLit
			/ CompositeLit
			/ OperandName
			/ '(' Expression ')'

		Literal
			= BasicLit
			/ FunctionLit
			/ CompositeLit

		BasicLit
			= imaginary_lit
			/ float_lit
			/ int_lit
			/ rune_lit
			/ string_lit

		OperandName
			= identifier

		QualifiedIdent
			= PackageName '.' identifier

		CompositeLit
			= LiteralType LiteralValue

		LiteralType
			= StructType
			/ ArrayType
			/ '[' '...' ']' ElementType
			/ SliceType
			/ MapType
			/ TypeName

		@single
		LiteralValue
			= '{' (ElementList ','?)? '}'

		ElementList
			= KeyedElement (',' KeyedElement)*

		KeyedElement
			= (Key ':')? Element

		Key
			= Expression
			/ LiteralValue

		FieldName
			= identifier

		Element
			= Expression
			/ LiteralValue

		FunctionLit
			= 'func' !more Signature FunctionBody
	}

	terminals
	{
		binary_op
			= '||'
			/ '&&'
			/ rel_op
			/ add_op
			/ mul_op

		rel_op
			= '=='
			/ '!='
			/ '<='
			/ '>='
			/ '<' ![=<-]
			/ '>' ![=>]

		add_op
			= '+' ![+]
			/ '-' ![-]
			/ '|' ![|]
			/ '^'

		mul_op
			= '*'
			/ '/'
			/ '%'
			/ '<<'
			/ '>>'
			/ '&^'
			/ '&' ![&]

		prefix_op
			= '+'
			/ '-'
			/ '!'
			/ '^'
			/ '*'
			/ '&' ![&]
			/ '<-'
	}
}