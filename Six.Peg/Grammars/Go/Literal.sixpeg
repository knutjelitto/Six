grammar Go
{
    terminals
    {
        // ------------------------------------
        // identifier
        // ------------------------------------

        identifier
            = !(('chan'/'interface'/'map'/'case'/'struct'/'func'/'default') !more) _ name

        name
            = name-head name-character*

        name-head
            = [a-zA-Z_µεÀβŝθχ]

        name-character
            = name-head
            / [0-9]

        more
            = name-character

        // ------------------------------------
        // char / letters / digits
        // ------------------------------------
        unicode_char
            = !line-break-character .

        unicode_letter
            = [a-zA-Z]

        unicode_digit
            = [0-9]

        letter
            = unicode_letter / [_]

        decimal_digit
            = [0-9]

        binary_digit
            = [01]

        octal_digit
            = [0-7]

        hex_digit
            = [0-9a-fA-F]


        // ------------------------------------
        // integer literal
        // ------------------------------------
        int_lit
            = _ decimal_lit
            / _ binary_lit
            / _ octal_lit
            / _ hex_lit

        decimal_lit
            = [0] ![bBoOxX0-9]
            / [1-9] ([_]? decimal_digits)?

        binary_lit
            = [0][bB] [_]? binary_digits

        octal_lit
            = [0][oO]? [_]? octal_digits

        hex_lit
            = [0][xX] '_'? hex_digits

        decimal_digits
            = decimal_digit ([_]? decimal_digit)*

        binary_digits
            = binary_digit ([_]? binary_digit)*

        octal_digits
            = octal_digit ([_]? octal_digit)*

        hex_digits
            = hex_digit ([_]? hex_digit)*

        // ------------------------------------
        // float literal
        // ------------------------------------
        float_lit
            = _ decimal_float_lit
            / _ hex_float_lit

        decimal_float_lit
            = decimal_digits [.] decimal_digits? decimal_exponent?
            / decimal_digits decimal_exponent
            / [.] decimal_digits decimal_exponent?

        decimal_exponent
            = [eE] [+-]? decimal_digits

        hex_float_lit
            = [0][xX] hex_mantissa hex_exponent

        hex_mantissa
            = [_]? hex_digits '.' hex_digits?
            / [_]? hex_digits
            / [.] hex_digits

        hex_exponent
            = [pP] [+-]? decimal_digits

        // ------------------------------------
        // imaginary literal
        // ------------------------------------
        imaginary_lit
            = (float_lit / int_lit)[i]


        // ------------------------------------
        // rune literal
        // ------------------------------------
        rune_lit
            = _ ['] (byte_value / unicode_value) [']


        // ------------------------------------
        // string literal
        // ------------------------------------

        string_lit
            = _ raw_string_lit
            / _ interpreted_string_lit

        raw_string_lit
            = [`] (![`] .)* [`]

        interpreted_string_lit
            = ["] (!["] (byte_value / unicode_value))* ["]

        unicode_value
            = little_u_value
            / big_u_value
            / escaped_char
            / unicode_char

        byte_value
            = octal_byte_value
            / hex_byte_value

        octal_byte_value
            = [\\] octal_digit octal_digit octal_digit

        hex_byte_value
            = [\\][x] hex_digit hex_digit

        little_u_value
            = [\\][u] hex_digit hex_digit hex_digit hex_digit

        big_u_value
            = [\\][U] hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit

        escaped_char
            = [\\] ([abfnrtv] / [\\] / ["] / ['])
    }
}
