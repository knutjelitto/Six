grammar Go
{
	rules
	{
		// ------------------------------------
		// statement
		// ------------------------------------

		@single
		Block
			= '{' StatementList '}'

		StatementList
			= ( Statement ';?' )*

		Statement
			= Declaration
			/ LabeledStmt
			/ GoStmt
			/ ReturnStmt
			/ BreakStmt
			/ ContinueStmt
			/ GotoStmt
			/ FallthroughStmt
			/ Block
			/ IfStmt
			/ SwitchStmt
			/ SelectStmt
			/ ForStmt
			/ DeferStmt
			/ SimpleStmt

		// ------------------------------------
		// simple-statement
		// ------------------------------------
		SimpleStmt
			= IncDecStmt
			/ Assignment
			/ SendStmt
			/ ShortVarDecl
			/ ExpressionStmt

		// ------------------------------------
		// labeled-statement
		// ------------------------------------
		LabeledStmt
			= Label ':' ![=] Statement?

		Label
			= identifier

		// ------------------------------------
		// go-statement
		// ------------------------------------
		GoStmt
			= 'go' !more Expression

		// ------------------------------------
		// return-statement
		// ------------------------------------
		ReturnStmt
			= 'return' (!line-end ExpressionList?)?

		// ------------------------------------
		// break-statement
		// ------------------------------------
		BreakStmt
			= 'break' (!line-end Label)?

		// ------------------------------------
		// continue-statement
		// ------------------------------------
		ContinueStmt
			= 'continue' (!line-end Label)?

		// ------------------------------------
		// goto-statement
		// ------------------------------------
		GotoStmt
			= 'goto' Label?

		// ------------------------------------
		// fallthrough-statement
		// ------------------------------------
		FallthroughStmt
			= 'fallthrough'

		// ------------------------------------
		// if-statement
		// ------------------------------------
		IfStmt
			= 'if' (SimpleStmt ';')? Expression Block ('else' (IfStmt / Block))?

		// ------------------------------------
		// switch-statement
		// ------------------------------------
		SwitchStmt
			= ExprSwitchStmt
			/ TypeSwitchStmt

		ExprSwitchStmt
			= 'switch' (SimpleStmt ';')? Expression? '{' ExprCaseClause* '}'

		ExprCaseClause
			= ExprSwitchCase ':' StatementList

		ExprSwitchCase
			= 'case' ExpressionList
			/ 'default'

		TypeSwitchStmt
			= 'switch' (SimpleStmt ';')? TypeSwitchGuard '{' TypeCaseClause* '}'

		TypeSwitchGuard
			= (identifier ':=')? PostfixExpr '.' '(' 'type' ')'

		TypeCaseClause
			= TypeSwitchCase ':' StatementList

		TypeSwitchCase
			= 'case' TypeList
			/ 'default'


		// ------------------------------------
		// select-statement
		// ------------------------------------
		SelectStmt
			= 'select' '{' CommClause* '}'

		CommClause
			= CommCase ':' StatementList

		CommCase
			= 'case' (SendStmt / RecvStmt)
			/ 'default'

		RecvStmt
			= (ExpressionList '=' / IdentifierList ':=')? RecvExpr

		RecvExpr
			= Expression

		// ------------------------------------
		// for-statement
		// ------------------------------------
		ForStmt
			= 'for' !more (ForClause / RangeClause / Condition)? Block

		Condition
			= Expression

		ForClause
			= InitStmt? ';' Condition? ';' PostStmt?

		InitStmt
			= SimpleStmt

		PostStmt
			= SimpleStmt

		RangeClause
			= (ExpressionList '=' / IdentifierList ':=')? 'range' Expression

		// ------------------------------------
		// defer-statement
		// ------------------------------------
		DeferStmt
			= 'defer' Expression

		// ------------------------------------
		// empty-statement
		// ------------------------------------
		EmptyStmt
			=

		// ------------------------------------
		// ExpressionStmt-statement
		// ------------------------------------
		ExpressionStmt
			= !(('break'/'return'/'continue'/'fallthrough'/'if') !more) Expression

		// ------------------------------------
		// send-statement
		// ------------------------------------
		SendStmt
			= Channel '<-' Expression

		Channel
			= Expression

		// ------------------------------------
		// inc/dec-statement
		// ------------------------------------
		IncDecStmt
			= Expression ('++'/'--')

		// ------------------------------------
		// assignment-statement
		// ------------------------------------
		Assignment
			= ExpressionList assign_op ExpressionList

		assign_op
			= (add_op / mul_op / _)? [=]

		// ------------------------------------
		// short var declaration
		// ------------------------------------
		ShortVarDecl
			= IdentifierList ':=' ExpressionList
	}
}
