grammar Pony
{
    options
    {
        start = module
        space = _
        more = more
        matches = first // unconditionally use first match of any rule
    }

    rules
    {
        module:
            string-literal? use* class_def* EOF

        use:
            'use' (identifier '=')? (string-literal | use_ffi) ('if' infix)?

        use_ffi:
            '@' (identifier | string-literal) typeargs '(' params? ')' '?'?

        class-kind:
            'type' | 'interface' | 'trait' | 'primitive' | 'struct' | 'class' | 'actor'

        class_def: 
            class-kind anno? '@'? cap? identifier typeparams? ('is' type)? string-literal? members

        members:
            field* method*

        field-kind:
            'var' | 'let' | 'embed'

        field:
            field-kind identifier ':' type ('=' infix)? string-literal?

        method-kind:
            'fun' | 'be' | 'new'

        method:
            method-kind anno? (cap | '@')? identifier typeparams? '(' params? ')' (':' type)? '?'? string-literal? ('=>' rawseq)?

        anno:
            ('\\' identifier (',' identifier)* '\\')

        annotatedrawseq:
            anno? (exprseq | jump)

        rawseq
            : exprseq
            | jump

        exprseq:
            assignment (semiexpr | nosemi)?

        nextexprseq:
            nextassignment (semiexpr | nosemi)?

        nosemi
            : nextexprseq
            | jump

        semiexpr:
            ';' (exprseq | jump)

        jump:
            ('return' | 'break' | 'continue' | 'error' | 'compile_intrinsic' | 'compile_error') rawseq?

        nextassignment:
            nextinfix ('=' assignment)?

        assignment:
            infix ('=' assignment)?

        nextinfix:
            nextterm infix-rest*

        infix:
            term infix-rest*

        infix-rest
            : binop
            | isop
            | 'as' type

        binop:
            infix-operator '?'? term

        isop:
            ('is' | 'isnt') term

        infix-operator
            : 'and'
            | 'or'
            | 'xor'

            | '+~'
            | '+'
            | '-~'
            | '-'
            | '*~'
            | '*'
            | '/~'
            | '/'
            | '%%~'
            | '%%'
            | '%~'
            | '%'

            | '<<~'
            | '<<'
            | '<=~'
            | '<='
            | '<~'
            | '<'

            | '>>~'
            | '>>'
            | '>=~'
            | '>='
            | '>~'
            | '>'

            | '==~'
            | '=='
            | '!=~'
            | '!='


        @single
        nextterm
            : 'if'      anno? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'
            | 'ifdef'   anno? infix 'then' rawseq (elseifdef | ('else' annotatedrawseq))? 'end'
            | 'iftype'  anno? iftype (elseiftype | ('else' annotatedrawseq))? 'end'
            | 'match'   anno? rawseq caseexpr* ('else' annotatedrawseq)? 'end'
            | 'while'   anno? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'repeat'  anno? rawseq 'until' annotatedrawseq ('else' annotatedrawseq)? 'end'
            | 'for'     anno? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'with'    anno? (withelem (',' withelem)*) 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'try'     anno? rawseq ('else' annotatedrawseq)? ('then' annotatedrawseq)? 'end'
            | 'recover' anno? cap? rawseq 'end'
            | 'consume' cap? term
            | nextpattern
            | '#' postfix

        @single
        term
            : 'if'      anno? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'
            | 'ifdef'   anno? infix 'then' rawseq (elseifdef | ('else' annotatedrawseq))? 'end'
            | 'iftype'  anno? iftype (elseiftype | ('else' annotatedrawseq))? 'end'
            | 'match'   anno? rawseq caseexpr* ('else' annotatedrawseq)? 'end'
            | 'while'   anno? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'repeat'  anno? rawseq 'until' annotatedrawseq ('else' annotatedrawseq)? 'end'
            | 'for'     anno? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'with'    anno? (withelem (',' withelem)*) 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'try'     anno? rawseq ('else' annotatedrawseq)? ('then' annotatedrawseq)? 'end'
            | 'recover' anno? cap? rawseq 'end'
            | 'consume' cap? term
            | pattern
            | '#' postfix

        withelem:
            idseq '=' rawseq

        caseexpr:
            '|' anno? casepattern? ('if' rawseq)? ('=>' rawseq)?

        elseiftype:
            'elseif' anno? iftype (elseiftype | ('else' annotatedrawseq))?

        iftype:
            type '<:' type 'then' rawseq

        elseifdef:
            'elseif' anno? infix 'then' rawseq (elseifdef | ('else' annotatedrawseq))?

        elseif:
            'elseif' anno? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))?

        idseq
            : identifier
            | '(' idseq_in_seq (',' idseq_in_seq)* ')'

        idseq_in_seq
            : identifier
            | '(' idseq_in_seq (',' idseq_in_seq)* ')'

        nextpattern
            : ('var' | 'let' | 'embed') identifier (':' type)?
            | nextparampattern

        casepattern
            : ('var' | 'let' | 'embed') identifier (':' type)?
            | caseparampattern

        pattern
            : ('var' | 'let' | 'embed') identifier (':' type)?
            | parampattern

        nextparampattern
            : ('not' | 'addressof' | MINUS_TILDE_NEW | MINUS_NEW | 'digestof') parampattern
            | nextpostfix

        caseparampattern
            : ('not' | 'addressof' | '-~' | '-' | MINUS_TILDE_NEW | MINUS_NEW | 'digestof') caseparampattern
            | casepostfix

        parampattern
            : ('not' | 'addressof' | '-~' | '-' | MINUS_TILDE_NEW | MINUS_NEW | 'digestof') parampattern
            | postfix

        nextpostfix:
            nextatom postfix-rest*

        casepostfix:
            caseatom postfix-rest*

        postfix:
            atom postfix-rest*

        postfix-rest
            : dot
            | tilde
            | chain
            | typeargs
            | call

        call:
            '(' positional? named? ')' '?'?

        chain:
            '.>' identifier

        tilde:
            '~' identifier

        dot:
            '.' identifier

        nextatom
            : identifier
            | 'this'
            | literal
            | LPAREN_NEW rawseq tuple? ')'
            | LSQUARE_NEW ('as' type ':')? rawseq? ']'
            | 'object' anno? cap? ('is' type)? members 'end'
            | '{' anno? cap? identifier? typeparams? '(' lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?
            | '@{' anno? cap? identifier? typeparams? '(' lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?
            | '@' (identifier | string-literal) typeargs? '(' positional? named? ')' '?'?
            | '__loc'
            | 'if' anno? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'
            | 'while' anno? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'for' anno? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'

        caseatom
            : identifier
            | 'this'
            | literal
            | '(' rawseq tuple? ')'
            | '[' ('as' type ':')? rawseq? ']'
            | 'object' anno? cap? ('is' type)? members 'end'
            | '{' anno? cap? identifier? typeparams? '(' lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?
            | '@{' anno? cap? identifier? typeparams? '(' lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?
            | '@' (identifier | string-literal) typeargs? '(' positional? named? ')' '?'?
            | '__loc'
            | 'while' anno? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'for' anno? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'

        atom
            : identifier
            | 'this'
            | literal
            | '(' rawseq tuple? ')'
            | '[' ('as' type ':')? rawseq? ']'
            | 'object' anno? cap? ('is' type)? members 'end'
            | '{' anno? cap? identifier? typeparams? '(' lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?
            | '@{' anno? cap? identifier? typeparams? '(' lambdaparams? ')' lambdacaptures? (':' type)? '?'? '=>' rawseq '}' cap?
            | '@' (identifier | string-literal) typeargs? '(' positional? named? ')' '?'?
            | '__loc'
            | 'if' anno? rawseq 'then' rawseq (elseif | ('else' annotatedrawseq))? 'end'
            | 'while' anno? rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'
            | 'for' anno? idseq 'in' rawseq 'do' rawseq ('else' annotatedrawseq)? 'end'

        tuple:
            ',' rawseq (',' rawseq)*

        lambdacaptures:
            '(' (lambdacapture | 'this') (',' (lambdacapture | 'this'))* ')'

        lambdacapture:
            identifier (':' type)? ('=' infix)?

        lambdaparams:
            lambdaparam (',' lambdaparam)*

        lambdaparam:
            identifier (':' type)? ('=' infix)?

        positional:
            rawseq (',' rawseq)*

        named:
            'where' namedarg (',' namedarg)*

        namedarg:
            identifier '=' rawseq

        type:
            atomtype ('->' type)?

        atomtype
            : 'this'
            | cap
            | '(' infixtype tupletype? ')'
            | nominal
            | lambdatype
            | barelambdatype

        barelambdatype:
            '@{' cap? identifier? typeparams? '(' (type (',' type)*)? ')' (':' type)? '?'? '}' (cap | gencap)? ('^' | '!')?

        lambdatype:
            '{' cap? identifier? typeparams? ('(' | LPAREN_NEW) (type (',' type)*)? ')' (':' type)? '?'? '}' (cap | gencap)? ('^' | '!')?

        tupletype:
            ',' infixtype (',' infixtype)*

        infixtype:
            type infixtype-rest*

        infixtype-rest
            : uniontype
            | isecttype

        isecttype:
            '&' type

        uniontype:
            '|' type

        nominal:
            identifier ('.' identifier)? typeargs? (cap | gencap)? ('^' | '!')?

        gencap:
            '#read' | '#send' | '#share' | '#alias' | '#any'

        cap:
            'iso' | 'trn' | 'ref' | 'val' | 'box' | 'tag'

        typeargs:
            '[' typearg (',' typearg)* ']'

        typeparams:
            '[' typeparam (',' typeparam)* ']'

        params:
            (param | '...') (',' (param | '...'))*

        typeparam:
            identifier (':' type)? ('=' typearg)?

        typearg
            : type
            | literal
            | '#' postfix

        literal
            : 'true'
            | 'false'
            | float-literal
            | integer-literal
            | string-literal

        param:
            identifier ':' type ('=' infix)?
    }

    terminals
    {
        EOF:
            _ !.

        _:  (whitespace | line-comment | nested-comment | new-line)*

        more:
            [0-9a-zA-Z_']

        keyword
            : 'compile_intrinsic'
            | 'use'
            | 'type'
            | 'interface'
            | 'trait'
            | 'primitive'
            | 'struct'
            | 'class'
            | 'actor'
            | 'object'
            | 'as'
            | 'is'
            | 'isnt'
            | 'var'
            | 'let'
            | 'embed'
            | 'new'
            | 'fun'
            | 'be'
            | 'iso'
            | 'trn'
            | 'ref'
            | 'val'
            | 'box'
            | 'tag'
            | 'this'
            | 'return'
            | 'break'
            | 'continue'
            | 'consume'
            | 'recover'
            | 'if'
            | 'ifdef'
            | 'iftype'
            | 'then'
            | 'else'
            | 'elseif'
            | 'end'
            | 'for'
            | 'in'
            | 'while'
            | 'do'
            | 'repeat'
            | 'until'
            | 'match'
            | 'where'
            | 'try'
            | 'with'
            | 'error'
            | 'compile_error'
            | 'not'
            | 'and'
            | 'or'
            | 'xor'
            | 'digestof'
            | 'addressof'
            | '__loc'
            | 'true'
            | 'false'

        // tokens

        identifier:
            !keyword _ identifier-head identifier-part* identifier-tail*

        identifier-head:
            [a-zA-Z_]

        identifier-part: 
            [a-zA-Z0-9_]

        identifier-tail:
            "'"

        integer-literal
            : _ "0b" (BINARY | [_])+
            | _ "0x" (HEX | [_])+
            | _ DIGIT (DIGIT | [_])*
            | _ ['] CHAR_CHAR* [']

        float-literal:
            _ DIGIT ![bx] (DIGIT | [_])* ([.] DIGIT (DIGIT | [_])*)? EXP?

        string-literal
            : _ triple-x (!triple-x .)* triple-x ["]*
            | _ ["] STRING_CHAR* ["]

        triple-x:
            "\"\"\""

        LPAREN_NEW:
            new-line "("

        LSQUARE_NEW:
            new-line "["

        MINUS_NEW:
            new-line "-"

        MINUS_TILDE_NEW:
            new-line "-~"

        line-comment:
            "//" (!"\n" .)*

        nested-comment:
            [/][*] nested-comment-text [*][/]

        nested-comment-text:
            nested-comment-text-item*

        nested-comment-text-item
            : nested-comment
            / !( [/][*] / [*][/] ) .

        whitespace:
            (" " | "\t" | "\r")+

        new-line:
            line-break _

        //
        // fragments
        //

        line-break
	        = [\u000A]
	        / [\u000D][\u000A]
	        / [\u000D]

        CHAR_CHAR
            : "\\\'" 
            | CHAR_ESC
            | !("\'" | "\\") .
  
        STRING_CHAR
            : "\\" "\""
            | ESC
            | !("\"" | "\\") .

        EXP:
            [eE][+-]? (DIGIT | "_")+

        DIGIT:
            [0-9]

        BINARY:
            [01]


        HEX:
            [0-9a-fA-F]

        ESC
            : CHAR_ESC
            | UNICODE_ESC
            | UNICODE2_ESC

        CHAR_ESC
            : "\\" ([abefnrtv0] | "\\")
            | HEX_ESC

        HEX_ESC:
            "\\x" HEX HEX

        UNICODE_ESC:
            "\\u" HEX HEX HEX HEX

        UNICODE2_ESC:
            "\\U" HEX HEX HEX HEX HEX HEX
    }
}