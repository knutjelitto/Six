grammar Go
{
	rules
	{
		// ------------------------------------
		// declaration
		// ------------------------------------
		Declaration
			= ConstDecl
			/ VarDecl
			/ TypeDecl

		TopLevelDecl
			= Declaration
			/ FunctionDecl
			/ MethodDecl


		IdentifierList
			= identifier (',' identifier)*


		// ------------------------------------
		// const-declaration
		// ------------------------------------
		ConstDecl
			= 'const' !more ( ConstSpec / '(' (ConstSpec ';?')* ')' )

		ConstSpec
			= IdentifierList ( Type? '=' ExpressionList )?

		// ------------------------------------
		// var-declaration
		// ------------------------------------
		VarDecl
			= 'var' !more ( VarSpec / '(' (VarSpec ';?')* ')' )

		VarSpec
			= IdentifierList ( Type ('=' ExpressionList)? / '=' ExpressionList )?


		// ------------------------------------
		// type-declaration
		// ------------------------------------
		TypeDecl
			= 'type' !more ( TypeSpec / '(' (TypeSpec ';?')* ')' )

		TypeSpec
			= AliasDecl
			/ TypeDef

		AliasDecl
			= identifier '=' Type

		TypeDef
			= identifier Type

		// ------------------------------------
		// function-declaration
		// ------------------------------------
		FunctionDecl
			= 'func' !more FunctionName Signature FunctionBody?

		FunctionName
			= identifier

		FunctionBody
			= Block

		// ------------------------------------
		// method-declaration
		// ------------------------------------
		MethodDecl
			= 'func' !more Receiver MethodName Signature FunctionBody

		Receiver
			= Parameters
	}
}
