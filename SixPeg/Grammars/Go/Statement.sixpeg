// ------------------------------------
// statement
// ------------------------------------

Block
	= '{' StatementList '}'

StatementList
	= ( Statement ';?' )*

Statement
	= Declaration
	/ LabeledStmt
	/ GoStmt
	/ ReturnStmt
	/ BreakStmt
	/ ContinueStmt
	/ GotoStmt
	/ FallthroughStmt
	/ Block
	/ IfStmt
	/ SwitchStmt
	/ SelectStmt
	/ ForStmt
	/ DeferStmt
	/ SimpleStmt

// ------------------------------------
// simple-statement
// ------------------------------------
SimpleStmt
	= IncDecStmt
	/ Assignment
	/ SendStmt
	/ ShortVarDecl
	/ ExpressionStmt
	/// EmptyStmt

// ------------------------------------
// labeled-statement
// ------------------------------------
LabeledStmt
	= Label ':' ![=] Statement

Label
	= identifier

// ------------------------------------
// go-statement
// ------------------------------------
GoStmt
	= 'go' !more Expression
	/ 'go' !more #error("go statement: bad expression")

// ------------------------------------
// return-statement
// ------------------------------------
ReturnStmt
	= 'return' ExpressionList?

// ------------------------------------
// break-statement
// ------------------------------------
BreakStmt
	= 'break' Label?

// ------------------------------------
// continue-statement
// ------------------------------------
ContinueStmt
	= 'continue' Label?

// ------------------------------------
// goto-statement
// ------------------------------------
GotoStmt
	= 'goto' Label?

// ------------------------------------
// fallthrough-statement
// ------------------------------------
FallthroughStmt
	= 'fallthrough'

// ------------------------------------
// if-statement
// ------------------------------------
IfStmt
	= 'if' (SimpleStmt ';')? Expression2 Block ('else' (IfStmt / Block))?
	/ 'if' (SimpleStmt ';')? Expression2 #error("if statement: bad block")

// ------------------------------------
// switch-statement
// ------------------------------------
SwitchStmt
	= ExprSwitchStmt
	/ TypeSwitchStmt

ExprSwitchStmt
	= 'switch' (SimpleStmt ';')? Expression? '{' ExprCaseClause* '}'

ExprCaseClause
	= ExprSwitchCase ':' StatementList

ExprSwitchCase
	= 'case' ExpressionList
	/ 'default'

TypeSwitchStmt
	= 'switch' (SimpleStmt ';')? TypeSwitchGuard '{' TypeCaseClause* '}'

TypeSwitchGuard
	= (identifier ':=')? PostfixExpr '.' '(' 'type' ')'

TypeCaseClause
	= TypeSwitchCase ':' StatementList

TypeSwitchCase
	= 'case' TypeList
	/ 'default'


// ------------------------------------
// select-statement
// ------------------------------------
SelectStmt
	= 'select' '{' CommClause* '}'

CommClause
	= CommCase ':' StatementList

CommCase
	= 'case' (SendStmt / RecvStmt)
	/ 'default'

RecvStmt
	= (ExpressionList '=' / IdentifierList ':=')? RecvExpr

RecvExpr
	= Expression

// ------------------------------------
// for-statement
// ------------------------------------
ForStmt
	= 'for' !more (ForClause / RangeClause / Condition2)? Block
	/ 'for' !more (ForClause / RangeClause / Condition2)? #error("for statement: bad-block")
	/ 'for' !more #error("for statement: bad head")

Condition
	= Expression

Condition2
	= Expression2

ForClause
	= InitStmt? ';' Condition? ';' PostStmt?

InitStmt
	= SimpleStmt

PostStmt
	= SimpleStmt

RangeClause
	= (ExpressionList '=' / IdentifierList ':=')? 'range' Expression2

// ------------------------------------
// defer-statement
// ------------------------------------
DeferStmt
	= 'defer' Expression

// ------------------------------------
// empty-statement
// ------------------------------------
EmptyStmt
	=

// ------------------------------------
// ExpressionStmt-statement
// ------------------------------------
ExpressionStmt
	= Expression

// ------------------------------------
// send-statement
// ------------------------------------
SendStmt
	= Channel '<-' Expression

Channel
	= Expression

// ------------------------------------
// inc/dec-statement
// ------------------------------------
IncDecStmt
	= Expression ('++'/'--')

// ------------------------------------
// assignment-statement
// ------------------------------------
Assignment
	= ExpressionList assign_op ExpressionList

assign_op
	= (add_op / mul_op)? '='

// ------------------------------------
// short var declaration
// ------------------------------------
ShortVarDecl
	= IdentifierList ':=' ExpressionList
	/ IdentifierList ':=' #error("short variable declaration: bad expression list")

