// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 4.0.1.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "PegParser.peg"
           Pegasus.Parser
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "PegParser.peg"
       System.Globalization
        #line default
        ;
    using
        #line 4 "PegParser.peg"
       System.Linq
        #line default
        ;
    using
        #line 5 "PegParser.peg"
       System.Text.RegularExpressions
        #line default
        ;
    using
        #line 6 "PegParser.peg"
       Microsoft.CodeAnalysis.CSharp.Syntax
        #line default
        ;
    using
        #line 7 "PegParser.peg"
       Pegasus.Expressions
        #line default
        ;
    using
        #line 8 "PegParser.peg"
       Pegasus.Properties
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="PegParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "4.0.1.0")]
    public
    partial class
    #line 2 "PegParser.peg"
           PegParser
    #line default
    {
        #line 10 "PegParser.peg"
 
    private readonly CSharpParser cSharpParser = new CSharpParser();
        #line default
        private Dictionary<CacheKey, object> storage;

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="PegParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="Grammar" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public Grammar Parse(string subject, string fileName = null)
        {
            IList<LexicalElement> lexicalElements;
            return this.Parse(subject, fileName, out lexicalElements);
        }

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="PegParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <param name="lexicalElements">When this method returns, contains the lexical elements for the parsing subject. This parameter is passed uninitialized.</param>
        /// <returns>The <see cref="Grammar" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public Grammar Parse(string subject, string fileName, out IList<LexicalElement> lexicalElements)
        {
            var cursor = new Cursor(subject, 0, fileName);
            return this.StartRuleHelper(cursor, this.grammar, "grammar", out lexicalElements).Value;
        }

        private IParseResult<
            #line 14 "PegParser.peg"
         Grammar
            #line default
            > grammar(ref Cursor cursor)
        {
            IParseResult<Grammar> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this._(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<KeyValuePair<Identifier, object>>> r2 = null;
                var settingsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<KeyValuePair<Identifier, object>>();
                while (true)
                {
                    var startCursor2 = cursor;
                    if (l0.Count > 0)
                    {
                        IParseResult<IList<string>> r3 = null;
                        r3 = this._(ref cursor);
                        if (r3 == null)
                        {
                            break;
                        }
                    }
                    IParseResult<KeyValuePair<Identifier, object>> r4 = null;
                    r4 = this.setting(ref cursor);
                    if (r4 != null)
                    {
                        l0.Add(r4.Value);
                    }
                    else
                    {
                        cursor = startCursor2;
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<KeyValuePair<Identifier, object>>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var settingsEnd = cursor;
                var settings = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    r5 = this._(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<IList<Rule>> r6 = null;
                        var rulesStart = cursor;
                        var startCursor3 = cursor;
                        var l1 = new List<Rule>();
                        while (true)
                        {
                            var startCursor4 = cursor;
                            if (l1.Count > 0)
                            {
                                IParseResult<IList<string>> r7 = null;
                                r7 = this._(ref cursor);
                                if (r7 == null)
                                {
                                    break;
                                }
                            }
                            IParseResult<Rule> r8 = null;
                            r8 = this.rule(ref cursor);
                            if (r8 != null)
                            {
                                l1.Add(r8.Value);
                            }
                            else
                            {
                                cursor = startCursor4;
                                break;
                            }
                        }
                        r6 = this.ReturnHelper<IList<Rule>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                        var rulesEnd = cursor;
                        var rules = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this._(ref cursor);
                            if (r9 != null)
                            {
                                IParseResult<string> r10 = null;
                                r10 = this.EOF(ref cursor);
                                if (r10 != null)
                                {
                                    r0 = this.ReturnHelper<Grammar>(startCursor0, ref cursor, state =>
                                        #line 16 "PegParser.peg"
        new Grammar(rules, settings, rulesEnd)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 19 "PegParser.peg"
         KeyValuePair<Identifier, object>
            #line default
            > setting(ref Cursor cursor)
        {
            IParseResult<KeyValuePair<Identifier, object>> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Identifier> r1 = null;
            var keyStart = cursor;
            r1 = this.settingName(ref cursor);
            var keyEnd = cursor;
            var key = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<
                        #line 20 "PegParser.peg"
                              object
                        #line default
                        > r3 = null;
                    var valueStart = cursor;
                    if (r3 == null)
                    {
                        r3 = this.type(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.identifier(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.@string(ref cursor);
                    }
                    if (r3 == null)
                    {
                        r3 = this.code(ref cursor);
                    }
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r4 = null;
                        var startCursor1 = cursor;
                        var l0 = new List<string>();
                        while (l0.Count < 1)
                        {
                            IParseResult<string> r5 = null;
                            var startCursor2 = cursor;
                            IParseResult<IList<string>> r6 = null;
                            r6 = this._(ref cursor);
                            if (r6 != null)
                            {
                                IParseResult<string> r7 = null;
                                r7 = this.semicolon(ref cursor);
                                if (r7 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor2.Location;
                                        r5 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                            state.Subject.Substring(startCursor2.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor2;
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                            if (r5 != null)
                            {
                                l0.Add(r5.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r4 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                        if (r4 != null)
                        {
                            r0 = this.ReturnHelper<KeyValuePair<Identifier, object>>(startCursor0, ref cursor, state =>
                                #line 21 "PegParser.peg"
        new KeyValuePair<Identifier, object>(key, value)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 24 "PegParser.peg"
             Identifier
            #line default
            > settingName(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "@");
            if (r1 != null)
            {
                IParseResult<Identifier> r2 = null;
                var nameStart = cursor;
                r2 = this.identifier(ref cursor);
                var nameEnd = cursor;
                var name = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Identifier>(startCursor0, ref cursor, state =>
                        #line 25 "PegParser.peg"
                          name
                        #line default
                        , ruleName: "settingName");
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> rulePreamble(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (l0.Count < 1)
            {
                IParseResult<string> r2 = null;
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                var startCursor3 = cursor;
                IParseResult<Quantifier> r4 = null;
                r4 = this.quantifier(ref cursor);
                if (r4 == null)
                {
                    r3 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor3;
                }
                if (r3 != null)
                {
                    IParseResult<CodeSpan> r5 = null;
                    r5 = this.expressionType(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<IList<string>> r6 = null;
                        r6 = this._(ref cursor);
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r2 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            if (r1 != null)
            {
                IParseResult<IList<Identifier>> r7 = null;
                var startCursor4 = cursor;
                var l1 = new List<Identifier>();
                while (true)
                {
                    var startCursor5 = cursor;
                    if (l1.Count > 0)
                    {
                        IParseResult<IList<string>> r8 = null;
                        r8 = this._(ref cursor);
                        if (r8 == null)
                        {
                            break;
                        }
                    }
                    IParseResult<Identifier> r9 = null;
                    r9 = this.ruleFlag(ref cursor);
                    if (r9 != null)
                    {
                        l1.Add(r9.Value);
                    }
                    else
                    {
                        cursor = startCursor5;
                        break;
                    }
                }
                r7 = this.ReturnHelper<IList<Identifier>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                if (r7 != null)
                {
                    IParseResult<IList<string>> r10 = null;
                    r10 = this._(ref cursor);
                    if (r10 != null)
                    {
                        IParseResult<string> r11 = null;
                        r11 = this.equals(ref cursor);
                        if (r11 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 30 "PegParser.peg"
      Rule
            #line default
            > rule(ref Cursor cursor)
        {
            IParseResult<Rule> r0 = null;
            var startCursor0 = cursor;
            IParseResult<Identifier> r1 = null;
            var nameStart = cursor;
            r1 = this.ruleName(ref cursor);
            var nameEnd = cursor;
            var name = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                r2 = this._(ref cursor);
                if (r2 != null)
                {
                    IParseResult<IList<CodeSpan>> r3 = null;
                    var typeStart = cursor;
                    var startCursor1 = cursor;
                    var l0 = new List<CodeSpan>();
                    while (l0.Count < 1)
                    {
                        IParseResult<CodeSpan> r4 = null;
                        r4 = this.expressionType(ref cursor);
                        if (r4 != null)
                        {
                            l0.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r3 = this.ReturnHelper<IList<CodeSpan>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    var typeEnd = cursor;
                    var type = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        IParseResult<IList<string>> r5 = null;
                        r5 = this._(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<IList<Identifier>> r6 = null;
                            var flagsStart = cursor;
                            var startCursor2 = cursor;
                            var l1 = new List<Identifier>();
                            while (true)
                            {
                                var startCursor3 = cursor;
                                if (l1.Count > 0)
                                {
                                    IParseResult<IList<string>> r7 = null;
                                    r7 = this._(ref cursor);
                                    if (r7 == null)
                                    {
                                        break;
                                    }
                                }
                                IParseResult<Identifier> r8 = null;
                                r8 = this.ruleFlag(ref cursor);
                                if (r8 != null)
                                {
                                    l1.Add(r8.Value);
                                }
                                else
                                {
                                    cursor = startCursor3;
                                    break;
                                }
                            }
                            r6 = this.ReturnHelper<IList<Identifier>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                            var flagsEnd = cursor;
                            var flags = ValueOrDefault(r6);
                            if (r6 != null)
                            {
                                IParseResult<IList<string>> r9 = null;
                                r9 = this._(ref cursor);
                                if (r9 != null)
                                {
                                    IParseResult<string> r10 = null;
                                    r10 = this.equals(ref cursor);
                                    if (r10 != null)
                                    {
                                        IParseResult<IList<string>> r11 = null;
                                        r11 = this._(ref cursor);
                                        if (r11 != null)
                                        {
                                            IParseResult<Expression> r12 = null;
                                            var expressionStart = cursor;
                                            r12 = this.expression(ref cursor);
                                            var expressionEnd = cursor;
                                            var expression = ValueOrDefault(r12);
                                            if (r12 != null)
                                            {
                                                IParseResult<IList<string>> r13 = null;
                                                r13 = this._(ref cursor);
                                                if (r13 != null)
                                                {
                                                    IParseResult<IList<string>> r14 = null;
                                                    var startCursor4 = cursor;
                                                    var l2 = new List<string>();
                                                    while (l2.Count < 1)
                                                    {
                                                        IParseResult<string> r15 = null;
                                                        r15 = this.semicolon(ref cursor);
                                                        if (r15 != null)
                                                        {
                                                            l2.Add(r15.Value);
                                                        }
                                                        else
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    r14 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                                                    if (r14 != null)
                                                    {
                                                        r0 = this.ReturnHelper<Rule>(startCursor0, ref cursor, state =>
                                                            #line 31 "PegParser.peg"
                                                                                                               {
        var typeValue = type.SingleOrDefault();
        return new Rule(
            identifier: name,
            expression: typeValue != null ? new TypedExpression(typeValue, expression) : expression,
            flags: flags);
    }
                                                            #line default
                                                            );
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor0;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor0;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor0;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor0;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<Identifier> ruleName(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            IParseResult<Identifier> r1;
            r1 = this.identifier(ref cursor);
            r0 = r1 != null
                ? this.ReturnHelper<Identifier>(r1.StartCursor, ref cursor, state => r1.Value, ruleName: "ruleName")
                : null;
            return r0;
        }

        private IParseResult<
            #line 42 "PegParser.peg"
          Identifier
            #line default
            > ruleFlag(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            var storageKey = new CacheKey("ruleFlag", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Identifier>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "-");
                if (r1 != null)
                {
                    IParseResult<Identifier> r2 = null;
                    var flagStart = cursor;
                    r2 = this.identifier(ref cursor);
                    var flagEnd = cursor;
                    var flag = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<Identifier>(startCursor0, ref cursor, state =>
                            #line 43 "PegParser.peg"
                          flag
                            #line default
                            , ruleName: "ruleFlag");
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 45 "PegParser.peg"
            Expression
            #line default
            > expression(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            r0 = this.choice(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 48 "PegParser.peg"
                CodeSpan
            #line default
            > expressionType(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            var storageKey = new CacheKey("expressionType", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeSpan>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    var startCursor0 = cursor;
                    IParseResult<string> r1 = null;
                    r1 = this.lt(ref cursor);
                    if (r1 != null)
                    {
                        IParseResult<IList<string>> r2 = null;
                        r2 = this._(ref cursor);
                        if (r2 != null)
                        {
                            IParseResult<CodeSpan> r3 = null;
                            var nameStart = cursor;
                            r3 = this.type(ref cursor);
                            var nameEnd = cursor;
                            var name = ValueOrDefault(r3);
                            if (r3 != null)
                            {
                                IParseResult<IList<string>> r4 = null;
                                r4 = this._(ref cursor);
                                if (r4 != null)
                                {
                                    IParseResult<string> r5 = null;
                                    if (r5 == null)
                                    {
                                        r5 = this.gt(ref cursor);
                                    }
                                    if (r5 == null)
                                    {
                                        throw this.ExceptionHelper(cursor, state =>
                                            #line 49 "PegParser.peg"
                                   "PEG0014:" + Resources.PEG0014_ERROR_PARSER_InvalidType
                                            #line default
                                            );
                                    }
                                    if (r5 != null)
                                    {
                                        r0 = this.ReturnHelper<CodeSpan>(startCursor0, ref cursor, state =>
                                            #line 49 "PegParser.peg"
                                                                                                name
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                if (r0 == null)
                {
                    var startCursor1 = cursor;
                    IParseResult<string> r6 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r7 = null;
                    r7 = this.lt(ref cursor);
                    if (r7 != null)
                    {
                        cursor = startCursor2;
                        r6 = this.ReturnHelper<string>(cursor, ref cursor, state => r7.Value);
                    }
                    if (r6 != null)
                    {
                        throw this.ExceptionHelper(cursor, state =>
                            #line 50 "PegParser.peg"
                "PEG0014:" + Resources.PEG0014_ERROR_PARSER_InvalidType
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 52 "PegParser.peg"
        Expression
            #line default
            > choice(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<Expression>> r1 = null;
            var choicesStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<Expression>();
            while (true)
            {
                var startCursor2 = cursor;
                if (l0.Count > 0)
                {
                    IParseResult<string> r2 = null;
                    var startCursor3 = cursor;
                    IParseResult<IList<string>> r3 = null;
                    r3 = this._(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.slash(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<IList<string>> r5 = null;
                            r5 = this._(ref cursor);
                            if (r5 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor3.Location;
                                    r2 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                        state.Subject.Substring(startCursor3.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r2 == null)
                    {
                        break;
                    }
                }
                IParseResult<Expression> r6 = null;
                r6 = this.sequence(ref cursor);
                if (r6 != null)
                {
                    l0.Add(r6.Value);
                }
                else
                {
                    cursor = startCursor2;
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<Expression>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var choicesEnd = cursor;
            var choices = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                    #line 53 "PegParser.peg"
                                     choices.Count == 1 ? choices[0] : new ChoiceExpression(choices)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 55 "PegParser.peg"
          Expression
            #line default
            > sequence(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<IList<Expression>> r1 = null;
                var elementsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<Expression>();
                while (true)
                {
                    var startCursor2 = cursor;
                    if (l0.Count > 0)
                    {
                        IParseResult<IList<string>> r2 = null;
                        r2 = this._(ref cursor);
                        if (r2 == null)
                        {
                            break;
                        }
                    }
                    IParseResult<Expression> r3 = null;
                    r3 = this.labeled(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        cursor = startCursor2;
                        break;
                    }
                }
                r1 = this.ReturnHelper<IList<Expression>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var elementsEnd = cursor;
                var elements = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    r4 = this._(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<CodeExpression> r5 = null;
                        var actionStart = cursor;
                        r5 = this.resultAction(ref cursor);
                        var actionEnd = cursor;
                        var action = ValueOrDefault(r5);
                        if (r5 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                                #line 57 "PegParser.peg"
        new SequenceExpression(elements.Concat(new Expression[] { action }))
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<IList<Expression>> r6 = null;
                var elementsStart = cursor;
                var startCursor4 = cursor;
                var l1 = new List<Expression>();
                while (true)
                {
                    var startCursor5 = cursor;
                    if (l1.Count > 0)
                    {
                        IParseResult<IList<string>> r7 = null;
                        r7 = this._(ref cursor);
                        if (r7 == null)
                        {
                            break;
                        }
                    }
                    IParseResult<Expression> r8 = null;
                    r8 = this.labeled(ref cursor);
                    if (r8 != null)
                    {
                        l1.Add(r8.Value);
                    }
                    else
                    {
                        cursor = startCursor5;
                        break;
                    }
                }
                r6 = this.ReturnHelper<IList<Expression>>(startCursor4, ref cursor, state => l1.AsReadOnly());
                var elementsEnd = cursor;
                var elements = ValueOrDefault(r6);
                if (r6 != null)
                {
                    r0 = this.ReturnHelper<Expression>(startCursor3, ref cursor, state =>
                        #line 60 "PegParser.peg"
        elements.Count == 1
            ? elements[0]
            : new SequenceExpression(elements)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 65 "PegParser.peg"
         Expression
            #line default
            > labeled(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var storageKey = new CacheKey("labeled", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Expression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    var startCursor0 = cursor;
                    IParseResult<Identifier> r1 = null;
                    var labelStart = cursor;
                    r1 = this.identifier(ref cursor);
                    var labelEnd = cursor;
                    var label = ValueOrDefault(r1);
                    if (r1 != null)
                    {
                        IParseResult<IList<string>> r2 = null;
                        r2 = this._(ref cursor);
                        if (r2 != null)
                        {
                            IParseResult<string> r3 = null;
                            r3 = this.colon(ref cursor);
                            if (r3 != null)
                            {
                                IParseResult<IList<string>> r4 = null;
                                r4 = this._(ref cursor);
                                if (r4 != null)
                                {
                                    IParseResult<Expression> r5 = null;
                                    var expressionStart = cursor;
                                    r5 = this.prefixed(ref cursor);
                                    var expressionEnd = cursor;
                                    var expression = ValueOrDefault(r5);
                                    if (r5 != null)
                                    {
                                        r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                                            #line 67 "PegParser.peg"
        new PrefixedExpression(label, expression)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor0;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                if (r0 == null)
                {
                    r0 = this.prefixed(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.stateAction(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.errorAction(ref cursor);
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 73 "PegParser.peg"
          Expression
            #line default
            > prefixed(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.and(ref cursor);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<CodeSpan> r3 = null;
                        var cStart = cursor;
                        r3 = this.delimitedExpression(ref cursor);
                        var cEnd = cursor;
                        var c = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                                #line 74 "PegParser.peg"
                                  new AndCodeExpression(c)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.and(ref cursor);
                if (r4 != null)
                {
                    IParseResult<IList<string>> r5 = null;
                    r5 = this._(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<Expression> r6 = null;
                        var eStart = cursor;
                        r6 = this.suffix(ref cursor);
                        var eEnd = cursor;
                        var e = ValueOrDefault(r6);
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor1, ref cursor, state =>
                                #line 75 "PegParser.peg"
                                  new AndExpression(e)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r7 = null;
                r7 = this.not(ref cursor);
                if (r7 != null)
                {
                    IParseResult<IList<string>> r8 = null;
                    r8 = this._(ref cursor);
                    if (r8 != null)
                    {
                        IParseResult<CodeSpan> r9 = null;
                        var cStart = cursor;
                        r9 = this.delimitedExpression(ref cursor);
                        var cEnd = cursor;
                        var c = ValueOrDefault(r9);
                        if (r9 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor2, ref cursor, state =>
                                #line 76 "PegParser.peg"
                                  new NotCodeExpression(c)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            if (r0 == null)
            {
                var startCursor3 = cursor;
                IParseResult<string> r10 = null;
                r10 = this.not(ref cursor);
                if (r10 != null)
                {
                    IParseResult<IList<string>> r11 = null;
                    r11 = this._(ref cursor);
                    if (r11 != null)
                    {
                        IParseResult<Expression> r12 = null;
                        var eStart = cursor;
                        r12 = this.suffix(ref cursor);
                        var eEnd = cursor;
                        var e = ValueOrDefault(r12);
                        if (r12 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor3, ref cursor, state =>
                                #line 77 "PegParser.peg"
                                  new NotExpression(e)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                else
                {
                    cursor = startCursor3;
                }
            }
            if (r0 == null)
            {
                r0 = this.suffix(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 80 "PegParser.peg"
        Expression
            #line default
            > suffix(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<Expression> r1 = null;
                var expressionStart = cursor;
                r1 = this.primary(ref cursor);
                var expressionEnd = cursor;
                var expression = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<Quantifier> r3 = null;
                        var qStart = cursor;
                        r3 = this.quantifier(ref cursor);
                        var qEnd = cursor;
                        var q = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                                #line 82 "PegParser.peg"
        new RepetitionExpression(expression, q)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                r0 = this.primary(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 86 "PegParser.peg"
         Expression
            #line default
            > primary(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var storageKey = new CacheKey("primary", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Expression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    var startCursor0 = cursor;
                    IParseResult<Identifier> r1 = null;
                    var nameStart = cursor;
                    r1 = this.ruleName(ref cursor);
                    var nameEnd = cursor;
                    var name = ValueOrDefault(r1);
                    if (r1 != null)
                    {
                        IParseResult<string> r2 = null;
                        var startCursor1 = cursor;
                        IParseResult<string> r3 = null;
                        var startCursor2 = cursor;
                        IParseResult<IList<string>> r4 = null;
                        r4 = this._(ref cursor);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.rulePreamble(ref cursor);
                            if (r5 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                        if (r3 == null)
                        {
                            r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                        if (r2 != null)
                        {
                            r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                                #line 87 "PegParser.peg"
                                      new NameExpression(name)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                if (r0 == null)
                {
                    r0 = this.literal(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.@class(ref cursor);
                }
                if (r0 == null)
                {
                    var startCursor3 = cursor;
                    IParseResult<string> r6 = null;
                    r6 = this.dot(ref cursor);
                    if (r6 != null)
                    {
                        r0 = this.ReturnHelper<Expression>(startCursor3, ref cursor, state =>
                            #line 90 "PegParser.peg"
          new WildcardExpression()
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                if (r0 == null)
                {
                    var startCursor4 = cursor;
                    IParseResult<string> r7 = null;
                    r7 = this.lparen(ref cursor);
                    if (r7 != null)
                    {
                        IParseResult<IList<string>> r8 = null;
                        r8 = this._(ref cursor);
                        if (r8 != null)
                        {
                            IParseResult<IList<CodeSpan>> r9 = null;
                            var typeStart = cursor;
                            var startCursor5 = cursor;
                            var l0 = new List<CodeSpan>();
                            while (l0.Count < 1)
                            {
                                IParseResult<CodeSpan> r10 = null;
                                r10 = this.expressionType(ref cursor);
                                if (r10 != null)
                                {
                                    l0.Add(r10.Value);
                                }
                                else
                                {
                                    break;
                                }
                            }
                            r9 = this.ReturnHelper<IList<CodeSpan>>(startCursor5, ref cursor, state => l0.AsReadOnly());
                            var typeEnd = cursor;
                            var type = ValueOrDefault(r9);
                            if (r9 != null)
                            {
                                IParseResult<IList<string>> r11 = null;
                                r11 = this._(ref cursor);
                                if (r11 != null)
                                {
                                    IParseResult<Expression> r12 = null;
                                    var expressionStart = cursor;
                                    r12 = this.expression(ref cursor);
                                    var expressionEnd = cursor;
                                    var expression = ValueOrDefault(r12);
                                    if (r12 != null)
                                    {
                                        IParseResult<IList<string>> r13 = null;
                                        r13 = this._(ref cursor);
                                        if (r13 != null)
                                        {
                                            IParseResult<string> r14 = null;
                                            r14 = this.rparen(ref cursor);
                                            if (r14 != null)
                                            {
                                                r0 = this.ReturnHelper<Expression>(startCursor4, ref cursor, state =>
                                                    #line 91 "PegParser.peg"
                                                                    {
        var typeValue = type.SingleOrDefault();
        return typeValue != null ? new TypedExpression(typeValue, expression) : expression;
    }
                                                    #line default
                                                    );
                                            }
                                            else
                                            {
                                                cursor = startCursor4;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor4;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor4;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                if (r0 == null)
                {
                    r0 = this.parseAction(ref cursor);
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 97 "PegParser.peg"
            Quantifier
            #line default
            > quantifier(ref Cursor cursor)
        {
            IParseResult<Quantifier> r0 = null;
            var storageKey = new CacheKey("quantifier", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Quantifier>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    var startCursor0 = cursor;
                    IParseResult<string> r1 = null;
                    var qStart = cursor;
                    r1 = this.question(ref cursor);
                    var qEnd = cursor;
                    var q = ValueOrDefault(r1);
                    if (r1 != null)
                    {
                        r0 = this.ReturnHelper<Quantifier>(startCursor0, ref cursor, state =>
                            #line 98 "PegParser.peg"
                 new Quantifier(qStart, qEnd, min: 0, max: 1)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                if (r0 == null)
                {
                    var startCursor1 = cursor;
                    IParseResult<string> r2 = null;
                    var qStart = cursor;
                    r2 = this.star(ref cursor);
                    var qEnd = cursor;
                    var q = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<Quantifier>(startCursor1, ref cursor, state =>
                            #line 99 "PegParser.peg"
             new Quantifier(qStart, qEnd, min: 0, max: null)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                if (r0 == null)
                {
                    var startCursor2 = cursor;
                    IParseResult<string> r3 = null;
                    var qStart = cursor;
                    r3 = this.plus(ref cursor);
                    var qEnd = cursor;
                    var q = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<Quantifier>(startCursor2, ref cursor, state =>
                            #line 100 "PegParser.peg"
             new Quantifier(qStart, qEnd, min: 1, max: null)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                if (r0 == null)
                {
                    var startCursor3 = cursor;
                    IParseResult<string> r4 = null;
                    var startStart = cursor;
                    r4 = this.lt(ref cursor);
                    var startEnd = cursor;
                    var start = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<IList<string>> r5 = null;
                        r5 = this._(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<int> r6 = null;
                            var minStart = cursor;
                            r6 = this.integer(ref cursor);
                            var minEnd = cursor;
                            var min = ValueOrDefault(r6);
                            if (r6 != null)
                            {
                                IParseResult<IList<string>> r7 = null;
                                r7 = this._(ref cursor);
                                if (r7 != null)
                                {
                                    IParseResult<string> r8 = null;
                                    r8 = this.comma(ref cursor);
                                    if (r8 != null)
                                    {
                                        IParseResult<IList<string>> r9 = null;
                                        r9 = this._(ref cursor);
                                        if (r9 != null)
                                        {
                                            IParseResult<IList<int>> r10 = null;
                                            var maxStart = cursor;
                                            var startCursor4 = cursor;
                                            var l0 = new List<int>();
                                            while (l0.Count < 1)
                                            {
                                                IParseResult<int> r11 = null;
                                                r11 = this.integer(ref cursor);
                                                if (r11 != null)
                                                {
                                                    l0.Add(r11.Value);
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                            r10 = this.ReturnHelper<IList<int>>(startCursor4, ref cursor, state => l0.AsReadOnly());
                                            var maxEnd = cursor;
                                            var max = ValueOrDefault(r10);
                                            if (r10 != null)
                                            {
                                                IParseResult<IList<string>> r12 = null;
                                                r12 = this._(ref cursor);
                                                if (r12 != null)
                                                {
                                                    IParseResult<string> r13 = null;
                                                    r13 = this.comma(ref cursor);
                                                    if (r13 != null)
                                                    {
                                                        IParseResult<IList<string>> r14 = null;
                                                        r14 = this._(ref cursor);
                                                        if (r14 != null)
                                                        {
                                                            IParseResult<Expression> r15 = null;
                                                            var delimiterStart = cursor;
                                                            r15 = this.expression(ref cursor);
                                                            var delimiterEnd = cursor;
                                                            var delimiter = ValueOrDefault(r15);
                                                            if (r15 != null)
                                                            {
                                                                IParseResult<IList<string>> r16 = null;
                                                                r16 = this._(ref cursor);
                                                                if (r16 != null)
                                                                {
                                                                    IParseResult<string> r17 = null;
                                                                    var endStart = cursor;
                                                                    r17 = this.gt(ref cursor);
                                                                    var endEnd = cursor;
                                                                    var end = ValueOrDefault(r17);
                                                                    if (r17 != null)
                                                                    {
                                                                        r0 = this.ReturnHelper<Quantifier>(startCursor3, ref cursor, state =>
                                                                            #line 101 "PegParser.peg"
                                                                                            new Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault(), delimiter: delimiter)
                                                                            #line default
                                                                            );
                                                                    }
                                                                    else
                                                                    {
                                                                        cursor = startCursor3;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    cursor = startCursor3;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                cursor = startCursor3;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            cursor = startCursor3;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor3;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor3;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor3;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor3;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor3;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                if (r0 == null)
                {
                    var startCursor5 = cursor;
                    IParseResult<string> r18 = null;
                    var startStart = cursor;
                    r18 = this.lt(ref cursor);
                    var startEnd = cursor;
                    var start = ValueOrDefault(r18);
                    if (r18 != null)
                    {
                        IParseResult<IList<string>> r19 = null;
                        r19 = this._(ref cursor);
                        if (r19 != null)
                        {
                            IParseResult<int> r20 = null;
                            var minStart = cursor;
                            r20 = this.integer(ref cursor);
                            var minEnd = cursor;
                            var min = ValueOrDefault(r20);
                            if (r20 != null)
                            {
                                IParseResult<IList<string>> r21 = null;
                                r21 = this._(ref cursor);
                                if (r21 != null)
                                {
                                    IParseResult<string> r22 = null;
                                    r22 = this.comma(ref cursor);
                                    if (r22 != null)
                                    {
                                        IParseResult<IList<string>> r23 = null;
                                        r23 = this._(ref cursor);
                                        if (r23 != null)
                                        {
                                            IParseResult<IList<int>> r24 = null;
                                            var maxStart = cursor;
                                            var startCursor6 = cursor;
                                            var l1 = new List<int>();
                                            while (l1.Count < 1)
                                            {
                                                IParseResult<int> r25 = null;
                                                r25 = this.integer(ref cursor);
                                                if (r25 != null)
                                                {
                                                    l1.Add(r25.Value);
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                            r24 = this.ReturnHelper<IList<int>>(startCursor6, ref cursor, state => l1.AsReadOnly());
                                            var maxEnd = cursor;
                                            var max = ValueOrDefault(r24);
                                            if (r24 != null)
                                            {
                                                IParseResult<IList<string>> r26 = null;
                                                r26 = this._(ref cursor);
                                                if (r26 != null)
                                                {
                                                    IParseResult<string> r27 = null;
                                                    var endStart = cursor;
                                                    r27 = this.gt(ref cursor);
                                                    var endEnd = cursor;
                                                    var end = ValueOrDefault(r27);
                                                    if (r27 != null)
                                                    {
                                                        r0 = this.ReturnHelper<Quantifier>(startCursor5, ref cursor, state =>
                                                            #line 102 "PegParser.peg"
                                                             new Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault())
                                                            #line default
                                                            );
                                                    }
                                                    else
                                                    {
                                                        cursor = startCursor5;
                                                    }
                                                }
                                                else
                                                {
                                                    cursor = startCursor5;
                                                }
                                            }
                                            else
                                            {
                                                cursor = startCursor5;
                                            }
                                        }
                                        else
                                        {
                                            cursor = startCursor5;
                                        }
                                    }
                                    else
                                    {
                                        cursor = startCursor5;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor5;
                                }
                            }
                            else
                            {
                                cursor = startCursor5;
                            }
                        }
                        else
                        {
                            cursor = startCursor5;
                        }
                    }
                    else
                    {
                        cursor = startCursor5;
                    }
                }
                if (r0 == null)
                {
                    var startCursor7 = cursor;
                    IParseResult<string> r28 = null;
                    var startStart = cursor;
                    r28 = this.lt(ref cursor);
                    var startEnd = cursor;
                    var start = ValueOrDefault(r28);
                    if (r28 != null)
                    {
                        IParseResult<IList<string>> r29 = null;
                        r29 = this._(ref cursor);
                        if (r29 != null)
                        {
                            IParseResult<int> r30 = null;
                            var countStart = cursor;
                            r30 = this.integer(ref cursor);
                            var countEnd = cursor;
                            var count = ValueOrDefault(r30);
                            if (r30 != null)
                            {
                                IParseResult<IList<string>> r31 = null;
                                r31 = this._(ref cursor);
                                if (r31 != null)
                                {
                                    IParseResult<string> r32 = null;
                                    var endStart = cursor;
                                    r32 = this.gt(ref cursor);
                                    var endEnd = cursor;
                                    var end = ValueOrDefault(r32);
                                    if (r32 != null)
                                    {
                                        r0 = this.ReturnHelper<Quantifier>(startCursor7, ref cursor, state =>
                                            #line 103 "PegParser.peg"
                                        new Quantifier(startStart, endEnd, min: count, max: count)
                                            #line default
                                            );
                                    }
                                    else
                                    {
                                        cursor = startCursor7;
                                    }
                                }
                                else
                                {
                                    cursor = startCursor7;
                                }
                            }
                            else
                            {
                                cursor = startCursor7;
                            }
                        }
                        else
                        {
                            cursor = startCursor7;
                        }
                    }
                    else
                    {
                        cursor = startCursor7;
                    }
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 105 "PegParser.peg"
         int
            #line default
            > integer(ref Cursor cursor)
        {
            IParseResult<int> r0 = null;
            var storageKey = new CacheKey("integer", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<int>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var digitsStart = cursor;
                var startCursor1 = cursor;
                IParseResult<IList<string>> r2 = null;
                var startCursor2 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.digit(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                if (l0.Count >= 1)
                {
                    r2 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor1.Location;
                        r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                            state.Subject.Substring(startCursor1.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                var digitsEnd = cursor;
                var digits = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<int>(startCursor0, ref cursor, state =>
                        #line 106 "PegParser.peg"
                         int.Parse(digits)
                        #line default
                        , ruleName: "integer");
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 108 "PegParser.peg"
             CodeExpression
            #line default
            > errorAction(ref Cursor cursor)
        {
            IParseResult<CodeExpression> r0 = null;
            var storageKey = new CacheKey("errorAction", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeExpression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.errorActionType(ref cursor);
                if (r1 != null)
                {
                    IParseResult<CodeSpan> r2 = null;
                    var codeStart = cursor;
                    r2 = this.delimitedExpression(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<CodeExpression>(startCursor0, ref cursor, state =>
                            #line 109 "PegParser.peg"
                                               new CodeExpression(code, CodeType.Error)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 111 "PegParser.peg"
             CodeExpression
            #line default
            > parseAction(ref Cursor cursor)
        {
            IParseResult<CodeExpression> r0 = null;
            var storageKey = new CacheKey("parseAction", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeExpression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.parseActionType(ref cursor);
                if (r1 != null)
                {
                    IParseResult<CodeSpan> r2 = null;
                    var codeStart = cursor;
                    r2 = this.delimitedExpression(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<CodeExpression>(startCursor0, ref cursor, state =>
                            #line 112 "PegParser.peg"
                                               new CodeExpression(code, CodeType.Parse)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 114 "PegParser.peg"
             CodeExpression
            #line default
            > stateAction(ref Cursor cursor)
        {
            IParseResult<CodeExpression> r0 = null;
            var storageKey = new CacheKey("stateAction", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeExpression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.stateActionType(ref cursor);
                if (r1 != null)
                {
                    IParseResult<CodeSpan> r2 = null;
                    var codeStart = cursor;
                    r2 = this.delimitedStatements(ref cursor);
                    var codeEnd = cursor;
                    var code = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        r0 = this.ReturnHelper<CodeExpression>(startCursor0, ref cursor, state =>
                            #line 115 "PegParser.peg"
                                               new CodeExpression(code, CodeType.State)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 117 "PegParser.peg"
              CodeExpression
            #line default
            > resultAction(ref Cursor cursor)
        {
            IParseResult<CodeExpression> r0 = null;
            var storageKey = new CacheKey("resultAction", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeExpression>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<CodeSpan> r1 = null;
                var codeStart = cursor;
                r1 = this.delimitedExpression(ref cursor);
                var codeEnd = cursor;
                var code = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<CodeExpression>(startCursor0, ref cursor, state =>
                        #line 118 "PegParser.peg"
                               new CodeExpression(code, CodeType.Result)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> errorActionType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "#error", ignoreCase: true, ruleName: "errorActionType");
            return r0;
        }

        private IParseResult<string> parseActionType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "#parse", ignoreCase: true, ruleName: "parseActionType");
            return r0;
        }

        private IParseResult<string> stateActionType(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "#");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "state", ignoreCase: true);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            , ruleName: "stateActionType");
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 124 "PegParser.peg"
                     CodeSpan
            #line default
            > delimitedExpression(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "{");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    r2 = this._(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<ExpressionSyntax> r3 = null;
                        var eStart = cursor;
                        r3 = this.cSharpExpression(ref cursor);
                        var eEnd = cursor;
                        var e = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<IList<string>> r4 = null;
                            r4 = this._(ref cursor);
                            if (r4 != null)
                            {
                                IParseResult<string> r5 = null;
                                if (r5 == null)
                                {
                                    r5 = this.ParseLiteral(ref cursor, "}");
                                }
                                if (r5 == null)
                                {
                                    throw this.ExceptionHelper(cursor, state =>
                                        #line 125 "PegParser.peg"
                                              "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode
                                        #line default
                                        );
                                }
                                if (r5 != null)
                                {
                                    r0 = this.ReturnHelper<CodeSpan>(startCursor0, ref cursor, state =>
                                        #line 125 "PegParser.peg"
                                                                                                                new CodeSpan(e.ToFullString(), eStart, eEnd)
                                        #line default
                                        , ruleName: "delimitedExpression");
                                }
                                else
                                {
                                    cursor = startCursor0;
                                }
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r6 = null;
                r6 = this.ParseLiteral(ref cursor, "{");
                if (r6 != null)
                {
                    IParseResult<IList<string>> r7 = null;
                    r7 = this._(ref cursor);
                    if (r7 != null)
                    {
                        IParseResult<BlockSyntax> r8 = null;
                        var bStart = cursor;
                        r8 = this.cSharpBlock(ref cursor);
                        var bEnd = cursor;
                        var b = ValueOrDefault(r8);
                        if (r8 != null)
                        {
                            IParseResult<IList<string>> r9 = null;
                            r9 = this._(ref cursor);
                            if (r9 != null)
                            {
                                IParseResult<string> r10 = null;
                                if (r10 == null)
                                {
                                    r10 = this.ParseLiteral(ref cursor, "}");
                                }
                                if (r10 == null)
                                {
                                    throw this.ExceptionHelper(cursor, state =>
                                        #line 126 "PegParser.peg"
                                              "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode
                                        #line default
                                        );
                                }
                                if (r10 != null)
                                {
                                    r0 = this.ReturnHelper<CodeSpan>(startCursor1, ref cursor, state =>
                                        #line 126 "PegParser.peg"
                                                                                                                new CodeSpan(b.ToFullString(), bStart, bEnd)
                                        #line default
                                        , ruleName: "delimitedExpression");
                                }
                                else
                                {
                                    cursor = startCursor1;
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r11 = null;
                r11 = this.ParseLiteral(ref cursor, "{");
                if (r11 != null)
                {
                    throw this.ExceptionHelper(cursor, state =>
                        #line 127 "PegParser.peg"
                "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 129 "PegParser.peg"
                     CodeSpan
            #line default
            > delimitedStatements(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "{");
                if (r2 != null)
                {
                    cursor = startCursor1;
                    r1 = this.ReturnHelper<string>(cursor, ref cursor, state => r2.Value);
                }
                if (r1 != null)
                {
                    IParseResult<BlockSyntax> r3 = null;
                    var bStart = cursor;
                    r3 = this.cSharpBlock(ref cursor);
                    var bEnd = cursor;
                    var b = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<CodeSpan>(startCursor0, ref cursor, state =>
                            #line 130 "PegParser.peg"
                         new CodeSpan(b.ToFullString(), bStart, bEnd)
                            #line default
                            , ruleName: "delimitedStatements");
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "{");
                if (r4 != null)
                {
                    throw this.ExceptionHelper(cursor, state =>
                        #line 131 "PegParser.peg"
                "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 133 "PegParser.peg"
             BlockSyntax
            #line default
            > cSharpBlock(ref Cursor cursor)
        {
            IParseResult<BlockSyntax> r0 = null;
            var startCursor0 = cursor;
            IParseResult<StatementSyntax> r1 = null;
            var sStart = cursor;
            r1 = this.cSharpStatement(ref cursor);
            var sEnd = cursor;
            var s = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                if (new Func<Cursor, bool>(state =>
                    #line 134 "PegParser.peg"
                         s is BlockSyntax
                    #line default
                    )(cursor))
                {
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<BlockSyntax>(startCursor0, ref cursor, state =>
                        #line 134 "PegParser.peg"
                                              s as BlockSyntax
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 136 "PegParser.peg"
                  ExpressionSyntax
            #line default
            > cSharpExpression(ref Cursor cursor)
        {
            IParseResult<ExpressionSyntax> r0 = null;
            var storageKey = new CacheKey("cSharpExpression", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<ExpressionSyntax>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                r0 = this.ParseHelper<ExpressionSyntax>(ref cursor, (ref Cursor state) =>
                    #line 137 "PegParser.peg"
            this.cSharpParser.Exported.Expression(ref state)
                    #line default
                    );
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 139 "PegParser.peg"
                 StatementSyntax
            #line default
            > cSharpStatement(ref Cursor cursor)
        {
            IParseResult<StatementSyntax> r0 = null;
            var storageKey = new CacheKey("cSharpStatement", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<StatementSyntax>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                r0 = this.ParseHelper<StatementSyntax>(ref cursor, (ref Cursor state) =>
                    #line 140 "PegParser.peg"
            this.cSharpParser.Exported.Statement(ref state)
                    #line default
                    );
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 142 "PegParser.peg"
            TypeSyntax
            #line default
            > cSharpType(ref Cursor cursor)
        {
            IParseResult<TypeSyntax> r0 = null;
            var storageKey = new CacheKey("cSharpType", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<TypeSyntax>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                r0 = this.ParseHelper<TypeSyntax>(ref cursor, (ref Cursor state) =>
                    #line 143 "PegParser.peg"
            this.cSharpParser.Exported.Type(ref state)
                    #line default
                    );
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 145 "PegParser.peg"
      CodeSpan
            #line default
            > code(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "{");
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    var contentsStart = cursor;
                    r2 = this.braceContents(ref cursor);
                    var contentsEnd = cursor;
                    var contents = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "}");
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<CodeSpan>(startCursor0, ref cursor, state =>
                                #line 146 "PegParser.peg"
                                     new CodeSpan(contents, contentsStart, contentsEnd)
                                #line default
                                , ruleName: "code");
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "{");
                if (r4 != null)
                {
                    throw this.ExceptionHelper(cursor, state =>
                        #line 147 "PegParser.peg"
                "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> braceContents(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var partsStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                if (r2 == null)
                {
                    var startCursor2 = cursor;
                    IParseResult<IList<string>> r3 = null;
                    var charsStart = cursor;
                    var startCursor3 = cursor;
                    var l1 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseClass(ref cursor, "{{}}", negated: true);
                        if (r4 != null)
                        {
                            l1.Add(r4.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l1.Count >= 1)
                    {
                        r3 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l1.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    var charsEnd = cursor;
                    var chars = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        {
                            var len = cursor.Location - startCursor2.Location;
                            r2 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                state.Subject.Substring(startCursor2.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                if (r2 == null)
                {
                    var startCursor4 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "{");
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.braceContents(ref cursor);
                        if (r6 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseLiteral(ref cursor, "}");
                            if (r7 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor4.Location;
                                    r2 = this.ReturnHelper<string>(startCursor4, ref cursor, state =>
                                        state.Subject.Substring(startCursor4.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                        }
                        else
                        {
                            cursor = startCursor4;
                        }
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            var partsEnd = cursor;
            var parts = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 150 "PegParser.peg"
                                                       string.Concat(parts)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> equals(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "=", ruleName: "equals");
            return r0;
        }

        private IParseResult<string> colon(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ":", ruleName: "colon");
            return r0;
        }

        private IParseResult<string> semicolon(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ";", ruleName: "semicolon");
            return r0;
        }

        private IParseResult<string> slash(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "/", ruleName: "slash");
            return r0;
        }

        private IParseResult<string> and(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "&", ruleName: "and");
            return r0;
        }

        private IParseResult<string> not(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "!", ruleName: "not");
            return r0;
        }

        private IParseResult<string> question(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "?", ruleName: "question");
            return r0;
        }

        private IParseResult<string> star(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "*", ruleName: "star");
            return r0;
        }

        private IParseResult<string> plus(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "+", ruleName: "plus");
            return r0;
        }

        private IParseResult<string> lparen(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "(", ruleName: "lparen");
            return r0;
        }

        private IParseResult<string> rparen(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ")", ruleName: "rparen");
            return r0;
        }

        private IParseResult<string> dot(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ".", ruleName: "dot");
            return r0;
        }

        private IParseResult<string> lt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "<", ruleName: "lt");
            return r0;
        }

        private IParseResult<string> gt(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ">", ruleName: "gt");
            return r0;
        }

        private IParseResult<string> comma(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, ",", ruleName: "comma");
            return r0;
        }

        private IParseResult<string> lbracket(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "[", ruleName: "lbracket");
            return r0;
        }

        private IParseResult<string> rbracket(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "]", ruleName: "rbracket");
            return r0;
        }

        private IParseResult<
            #line 170 "PegParser.peg"
            Identifier
            #line default
            > identifier(ref Cursor cursor)
        {
            IParseResult<Identifier> r0 = null;
            var storageKey = new CacheKey("identifier", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<Identifier>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var nameStart = cursor;
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.digit(ref cursor);
                if (r3 == null)
                {
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r2 != null)
                {
                    IParseResult<IList<string>> r4 = null;
                    var startCursor3 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r5 = null;
                        if (r5 == null)
                        {
                            r5 = this.letter(ref cursor);
                        }
                        if (r5 == null)
                        {
                            r5 = this.digit(ref cursor);
                        }
                        if (r5 == null)
                        {
                            r5 = this.ParseLiteral(ref cursor, "_");
                        }
                        if (r5 == null)
                        {
                            r5 = this.ParseLiteral(ref cursor, "$");
                        }
                        if (r5 != null)
                        {
                            l0.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r4 = this.ReturnHelper<IList<string>>(startCursor3, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r1 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                var nameEnd = cursor;
                var name = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<Identifier>(startCursor0, ref cursor, state =>
                        #line 171 "PegParser.peg"
                                                  new Identifier(name, nameStart, nameEnd)
                        #line default
                        , ruleName: "identifier");
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 173 "PegParser.peg"
      CodeSpan
            #line default
            > type(ref Cursor cursor)
        {
            IParseResult<CodeSpan> r0 = null;
            var storageKey = new CacheKey("type", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<CodeSpan>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<TypeSyntax> r1 = null;
                var typeStart = cursor;
                r1 = this.cSharpType(ref cursor);
                var typeEnd = cursor;
                var type = ValueOrDefault(r1);
                if (r1 != null)
                {
                    r0 = this.ReturnHelper<CodeSpan>(startCursor0, ref cursor, state =>
                        #line 174 "PegParser.peg"
                      new CodeSpan(type.ToFullString(), typeStart, typeEnd, value: Regex.Replace(Regex.Replace(type.ToString(), @"(?<!,)\s+|\s+(?=[,\]])", ""), @",(?=\w)", ", "))
                        #line default
                        , ruleName: "type");
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<
            #line 176 "PegParser.peg"
         Expression
            #line default
            > literal(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            r1 = this.@string(ref cursor);
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var flagsStart = cursor;
                if (r2 == null)
                {
                    var startCursor1 = cursor;
                    IParseResult<string> r3 = null;
                    r3 = this.ParseClass(ref cursor, "ssii");
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "r");
                        if (r4 != null)
                        {
                            {
                                var len = cursor.Location - startCursor1.Location;
                                r2 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                    state.Subject.Substring(startCursor1.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                if (r2 == null)
                {
                    var startCursor2 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "r");
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseClass(ref cursor, "ssii");
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r2 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                if (r2 == null)
                {
                    r2 = this.ParseClass(ref cursor, "ssii");
                }
                if (r2 == null)
                {
                    r2 = this.ParseLiteral(ref cursor, "r");
                }
                if (r2 == null)
                {
                    var startCursor3 = cursor;
                    IParseResult<IList<string>> r7 = null;
                    var unrecognizedStart = cursor;
                    var startCursor4 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r8 = null;
                        r8 = this.ParseClass(ref cursor, "az", ignoreCase: true);
                        if (r8 != null)
                        {
                            l0.Add(r8.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    if (l0.Count >= 1)
                    {
                        r7 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l0.AsReadOnly());
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                    var unrecognizedEnd = cursor;
                    var unrecognized = ValueOrDefault(r7);
                    if (r7 != null)
                    {
                        throw this.ExceptionHelper(cursor, state =>
                            #line 177 "PegParser.peg"
                                                                                        "PEG0026:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0026_ERROR_PARSER_StringFlagsUnrecognized, unrecognized)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                }
                if (r2 == null)
                {
                    var startCursor5 = cursor;
                    {
                        var len = cursor.Location - startCursor5.Location;
                        r2 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                            state.Subject.Substring(startCursor5.Location, len)
                            );
                    }
                }
                var flagsEnd = cursor;
                var flags = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                        #line 178 "PegParser.peg"
        new LiteralExpression(valueStart, flagsEnd, value, ignoreCase: flags.Contains('i') ? true : flags.Contains('s') ? false : (bool?)null, fromResource: flags.Contains('r'))
                        #line default
                        , ruleName: "literal");
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> @string(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var stringStart = cursor;
            if (r1 == null)
            {
                r1 = this.doubleQuotedString(ref cursor);
            }
            if (r1 == null)
            {
                r1 = this.singleQuotedString(ref cursor);
            }
            var stringEnd = cursor;
            var @string = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 182 "PegParser.peg"
                                                       @string
                    #line default
                    , ruleName: "string");
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> doubleQuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\"");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var charsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.doubleQuotedCharacter(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var charsEnd = cursor;
                var chars = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    if (r4 == null)
                    {
                        r4 = this.ParseLiteral(ref cursor, "\"");
                    }
                    if (r4 == null)
                    {
                        throw this.ExceptionHelper(cursor, state =>
                            #line 185 "PegParser.peg"
                                                    "PEG0009:" + Resources.PEG0009_ERROR_PARSER_UnterminatedString
                            #line default
                            );
                    }
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 185 "PegParser.peg"
                                                                                                                        string.Concat(chars)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> doubleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleDoubleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleDoubleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\"");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                var charStart = cursor;
                r3 = this.ParseAny(ref cursor);
                var charEnd = cursor;
                var @char = ValueOrDefault(r3);
                if (r3 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 196 "PegParser.peg"
                                     @char
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> singleQuotedString(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\'");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var charsStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.singleQuotedCharacter(ref cursor);
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var charsEnd = cursor;
                var chars = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    if (r4 == null)
                    {
                        r4 = this.ParseLiteral(ref cursor, "\'");
                    }
                    if (r4 == null)
                    {
                        throw this.ExceptionHelper(cursor, state =>
                            #line 199 "PegParser.peg"
                                                    "PEG0009:" + Resources.PEG0009_ERROR_PARSER_UnterminatedString
                            #line default
                            );
                    }
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 199 "PegParser.peg"
                                                                                                                        string.Concat(chars)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> singleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.simpleSingleQuotedCharacter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.simpleEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.zeroEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.hexEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.unicodeEscapeSequence(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.eolEscapeSequence(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> simpleSingleQuotedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\'");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseAny(ref cursor);
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 212 "PegParser.peg"
       Expression
            #line default
            > @class(ref Cursor cursor)
        {
            IParseResult<Expression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.lbracket(ref cursor);
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var invertedStart = cursor;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (l0.Count < 1)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.ParseLiteral(ref cursor, "^");
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                var invertedEnd = cursor;
                var inverted = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<CharacterRange>> r4 = null;
                    var partsStart = cursor;
                    var startCursor2 = cursor;
                    var l1 = new List<CharacterRange>();
                    while (true)
                    {
                        IParseResult<CharacterRange> r5 = null;
                        if (r5 == null)
                        {
                            r5 = this.classCharacterRange(ref cursor);
                        }
                        if (r5 == null)
                        {
                            r5 = this.classCharacter(ref cursor);
                        }
                        if (r5 != null)
                        {
                            l1.Add(r5.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r4 = this.ReturnHelper<IList<CharacterRange>>(startCursor2, ref cursor, state => l1.AsReadOnly());
                    var partsEnd = cursor;
                    var parts = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        if (r6 == null)
                        {
                            r6 = this.rbracket(ref cursor);
                        }
                        if (r6 == null)
                        {
                            throw this.ExceptionHelper(cursor, state =>
                                #line 213 "PegParser.peg"
                                                                                             "PEG0010:" + Resources.PEG0010_ERROR_PARSER_UnterminatedClass
                                #line default
                                );
                        }
                        if (r6 != null)
                        {
                            IParseResult<string> r7 = null;
                            var flagsStart = cursor;
                            if (r7 == null)
                            {
                                r7 = this.ParseClass(ref cursor, "ssii");
                            }
                            if (r7 == null)
                            {
                                var startCursor3 = cursor;
                                IParseResult<IList<string>> r8 = null;
                                var unrecognizedStart = cursor;
                                var startCursor4 = cursor;
                                var l2 = new List<string>();
                                while (true)
                                {
                                    IParseResult<string> r9 = null;
                                    r9 = this.ParseClass(ref cursor, "az", ignoreCase: true);
                                    if (r9 != null)
                                    {
                                        l2.Add(r9.Value);
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                if (l2.Count >= 1)
                                {
                                    r8 = this.ReturnHelper<IList<string>>(startCursor4, ref cursor, state => l2.AsReadOnly());
                                }
                                else
                                {
                                    cursor = startCursor4;
                                }
                                var unrecognizedEnd = cursor;
                                var unrecognized = ValueOrDefault(r8);
                                if (r8 != null)
                                {
                                    throw this.ExceptionHelper(cursor, state =>
                                        #line 213 "PegParser.peg"
                                                                                                                                                                                                         "PEG0026:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0026_ERROR_PARSER_CharacterClassFlagsUnrecognized, unrecognized)
                                        #line default
                                        );
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            if (r7 == null)
                            {
                                var startCursor5 = cursor;
                                {
                                    var len = cursor.Location - startCursor5.Location;
                                    r7 = this.ReturnHelper<string>(startCursor5, ref cursor, state =>
                                        state.Subject.Substring(startCursor5.Location, len)
                                        );
                                }
                            }
                            var flagsEnd = cursor;
                            var flags = ValueOrDefault(r7);
                            if (r7 != null)
                            {
                                r0 = this.ReturnHelper<Expression>(startCursor0, ref cursor, state =>
                                    #line 214 "PegParser.peg"
        new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags == "i" ? true : flags == "s" ? false : (bool?)null)
                                    #line default
                                    , ruleName: "class");
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 220 "PegParser.peg"
                     CharacterRange
            #line default
            > classCharacterRange(ref Cursor cursor)
        {
            IParseResult<CharacterRange> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var beginStart = cursor;
            r1 = this.bracketDelimitedCharacter(ref cursor);
            var beginEnd = cursor;
            var begin = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.ParseLiteral(ref cursor, "-");
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    var endStart = cursor;
                    r3 = this.bracketDelimitedCharacter(ref cursor);
                    var endEnd = cursor;
                    var end = ValueOrDefault(r3);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<CharacterRange>(startCursor0, ref cursor, state =>
                            #line 222 "PegParser.peg"
        new CharacterRange(begin[0], end[0])
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 225 "PegParser.peg"
                CharacterRange
            #line default
            > classCharacter(ref Cursor cursor)
        {
            IParseResult<CharacterRange> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var char_Start = cursor;
            r1 = this.bracketDelimitedCharacter(ref cursor);
            var char_End = cursor;
            var char_ = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<CharacterRange>(startCursor0, ref cursor, state =>
                    #line 227 "PegParser.peg"
        new CharacterRange(char_[0], char_[0])
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> bracketDelimitedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = new CacheKey("bracketDelimitedCharacter", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    r0 = this.simpleBracketDelimitedCharacter(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.simpleEscapeSequence(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.zeroEscapeSequence(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.hexEscapeSequence(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.unicodeEscapeSequence(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.eolEscapeSequence(ref cursor);
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> simpleBracketDelimitedCharacter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var startCursor1 = cursor;
            IParseResult<string> r2 = null;
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "]");
            }
            if (r2 == null)
            {
                r2 = this.ParseLiteral(ref cursor, "\\");
            }
            if (r2 == null)
            {
                r2 = this.eolChar(ref cursor);
            }
            if (r2 == null)
            {
                r1 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
            }
            else
            {
                cursor = startCursor1;
            }
            if (r1 != null)
            {
                IParseResult<string> r3 = null;
                r3 = this.ParseAny(ref cursor);
                if (r3 != null)
                {
                    {
                        var len = cursor.Location - startCursor0.Location;
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            state.Subject.Substring(startCursor0.Location, len)
                            );
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> simpleEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                if (r3 == null)
                {
                    r3 = this.digit(ref cursor);
                }
                if (r3 == null)
                {
                    r3 = this.ParseLiteral(ref cursor, "x");
                }
                if (r3 == null)
                {
                    r3 = this.ParseLiteral(ref cursor, "u");
                }
                if (r3 == null)
                {
                    r3 = this.eolChar(ref cursor);
                }
                if (r3 == null)
                {
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    IParseResult<string> r4 = null;
                    var charStart = cursor;
                    r4 = this.ParseAny(ref cursor);
                    var charEnd = cursor;
                    var @char = ValueOrDefault(r4);
                    if (r4 != null)
                    {
                        r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                            #line 243 "PegParser.peg"
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> zeroEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\0");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.digit(ref cursor);
                if (r3 == null)
                {
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor1;
                }
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 253 "PegParser.peg"
                   "\0"
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> hexEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\x");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var digitsStart = cursor;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.hexDigit(ref cursor);
                if (r3 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.hexDigit(ref cursor);
                    if (r4 != null)
                    {
                        {
                            var len = cursor.Location - startCursor1.Location;
                            r2 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                state.Subject.Substring(startCursor1.Location, len)
                                );
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                var digitsEnd = cursor;
                var digits = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 257 "PegParser.peg"
        ((char)Convert.ToInt32(digits, 16)).ToString()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> unicodeEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\u");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var digitsStart = cursor;
                var startCursor1 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.hexDigit(ref cursor);
                if (r3 != null)
                {
                    IParseResult<string> r4 = null;
                    r4 = this.hexDigit(ref cursor);
                    if (r4 != null)
                    {
                        IParseResult<string> r5 = null;
                        r5 = this.hexDigit(ref cursor);
                        if (r5 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.hexDigit(ref cursor);
                            if (r6 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor1.Location;
                                    r2 = this.ReturnHelper<string>(startCursor1, ref cursor, state =>
                                        state.Subject.Substring(startCursor1.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
                var digitsEnd = cursor;
                var digits = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 262 "PegParser.peg"
        ((char)Convert.ToInt32(digits, 16)).ToString()
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> eolEscapeSequence(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "\\");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                var eolStart = cursor;
                r2 = this.eol(ref cursor);
                var eolEnd = cursor;
                var eol = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                        #line 266 "PegParser.peg"
                   eol
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> digit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09");
            return r0;
        }

        private IParseResult<string> hexDigit(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "09afAF");
            return r0;
        }

        private IParseResult<string> letter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.lowerCaseLetter(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.upperCaseLetter(ref cursor);
            }
            return r0;
        }

        private IParseResult<string> lowerCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "az");
            return r0;
        }

        private IParseResult<string> upperCaseLetter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "AZ");
            return r0;
        }

        private IParseResult<IList<string>> _(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var storageKey = new CacheKey("_", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<IList<string>>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r1 = null;
                    if (r1 == null)
                    {
                        r1 = this.whitespace(ref cursor);
                    }
                    if (r1 == null)
                    {
                        r1 = this.eol(ref cursor);
                    }
                    if (r1 == null)
                    {
                        r1 = this.comment(ref cursor);
                    }
                    if (r1 != null)
                    {
                        l0.Add(r1.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> comment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = new CacheKey("comment", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    r0 = this.singleLineComment(ref cursor);
                }
                if (r0 == null)
                {
                    r0 = this.multiLineComment(ref cursor);
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> singleLineComment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = new CacheKey("singleLineComment", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "//");
                if (r1 != null)
                {
                    IParseResult<IList<string>> r2 = null;
                    var startCursor1 = cursor;
                    var l0 = new List<string>();
                    while (true)
                    {
                        IParseResult<string> r3 = null;
                        var startCursor2 = cursor;
                        IParseResult<string> r4 = null;
                        var startCursor3 = cursor;
                        IParseResult<string> r5 = null;
                        r5 = this.eolChar(ref cursor);
                        if (r5 == null)
                        {
                            r4 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                        }
                        else
                        {
                            cursor = startCursor3;
                        }
                        if (r4 != null)
                        {
                            IParseResult<string> r6 = null;
                            r6 = this.ParseAny(ref cursor);
                            if (r6 != null)
                            {
                                {
                                    var len = cursor.Location - startCursor2.Location;
                                    r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                        state.Subject.Substring(startCursor2.Location, len)
                                        );
                                }
                            }
                            else
                            {
                                cursor = startCursor2;
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                        if (r3 != null)
                        {
                            l0.Add(r3.Value);
                        }
                        else
                        {
                            break;
                        }
                    }
                    r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                    if (r2 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                , ruleName: "singleLineComment");
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> multiLineComment(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "/*");
            if (r1 != null)
            {
                IParseResult<IList<string>> r2 = null;
                var startCursor1 = cursor;
                var l0 = new List<string>();
                while (true)
                {
                    IParseResult<string> r3 = null;
                    var startCursor2 = cursor;
                    IParseResult<string> r4 = null;
                    var startCursor3 = cursor;
                    IParseResult<string> r5 = null;
                    r5 = this.ParseLiteral(ref cursor, "*/");
                    if (r5 == null)
                    {
                        r4 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    else
                    {
                        cursor = startCursor3;
                    }
                    if (r4 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseAny(ref cursor);
                        if (r6 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r3 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                    if (r3 != null)
                    {
                        l0.Add(r3.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r2 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
                if (r2 != null)
                {
                    IParseResult<string> r7 = null;
                    r7 = this.ParseLiteral(ref cursor, "*/");
                    if (r7 != null)
                    {
                        {
                            var len = cursor.Location - startCursor0.Location;
                            r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                state.Subject.Substring(startCursor0.Location, len)
                                , ruleName: "multiLineComment");
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> eol(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = new CacheKey("eol", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                if (r0 == null)
                {
                    r0 = this.ParseLiteral(ref cursor, "\n");
                }
                if (r0 == null)
                {
                    r0 = this.ParseLiteral(ref cursor, "\r\n");
                }
                if (r0 == null)
                {
                    r0 = this.ParseLiteral(ref cursor, "\r");
                }
                if (r0 == null)
                {
                    r0 = this.ParseLiteral(ref cursor, "\u2028");
                }
                if (r0 == null)
                {
                    r0 = this.ParseLiteral(ref cursor, "\u2029");
                }
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> eolChar(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseClass(ref cursor, "\n\n\r\r\u2028\u2028\u2029\u2029");
            return r0;
        }

        private IParseResult<string> whitespace(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var storageKey = new CacheKey("whitespace", cursor.StateKey, cursor.Location);
            if (this.storage.ContainsKey(storageKey))
            {
                r0 = (IParseResult<string>)this.storage[storageKey];
                if (r0 != null)
                {
                    cursor = r0.EndCursor;
                }
            }
            else
            {
                r0 = this.ParseClass(ref cursor, "  \t\t\v\v\f\f\u00a0\u00a0\ufeff\ufeff\u1680\u1680\u180e\u180e\u2000\u200a\u202f\u202f\u205f\u205f\u3000\u3000", ruleName: "whitespace");
                this.storage[storageKey] = r0;
            }
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseAny(ref cursor);
                if (r1 == null)
                {
                    r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var unexpectedStart = cursor;
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                r3 = this.ParseAny(ref cursor);
                if (r3 != null)
                {
                    cursor = startCursor2;
                    r2 = this.ReturnHelper<string>(cursor, ref cursor, state => r3.Value);
                }
                var unexpectedEnd = cursor;
                var unexpected = ValueOrDefault(r2);
                if (r2 != null)
                {
                    throw this.ExceptionHelper(cursor, state =>
                        #line 311 "PegParser.peg"
                          "PEG0008:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0008_ERROR_PARSER_UnexpectedEndOfInput, unexpected)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<T> StartRuleHelper<T>(Cursor cursor, ParseDelegate<T> startRule, string ruleName, out IList<LexicalElement> lexicalElements)
        {
            try
            {
                this.storage = new Dictionary<CacheKey, object>();
                var result = startRule(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse '" + ruleName + "'.");
                }
                lexicalElements = cursor.GetLexicalElements();
                return result;
            }
            finally
            {
                this.storage = null;
            }
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false, string ruleName = null)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr, ruleName);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false, string ruleName = null)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr, ruleName);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor, string ruleName = null)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr, ruleName);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode, string ruleName = null)
        {
            if (ruleName != null)
            {
                var state = endCursor.WithMutability(true);
                var element = new LexicalElement { StartCursor = startCursor, EndCursor = endCursor, Name = ruleName };
                state[Cursor.LexicalElementsKey] = (state[Cursor.LexicalElementsKey] as ListNode<LexicalElement>).Push(element);
                element.EndCursor = endCursor = state.WithMutability(false);
            }
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private IParseResult<T> ParseHelper<T>(ref Cursor cursor, ParseDelegate<T> wrappedCode, string ruleName = null)
        {
            var startCursor = cursor;
            var result = wrappedCode(ref cursor);
            if (result == null)
            {
                cursor = startCursor;
                return null;
            }
            else
            {
                cursor = cursor.WithMutability(false);
                if (ruleName != null)
                {
                    var state = cursor.WithMutability(true);
                    var element = new LexicalElement { StartCursor = startCursor, EndCursor = cursor, Name = ruleName };
                    state[Cursor.LexicalElementsKey] = (state[Cursor.LexicalElementsKey] as ListNode<LexicalElement>).Push(element);
                    element.EndCursor = cursor = state.WithMutability(false);
                }

                return result;
            }
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
