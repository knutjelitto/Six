unit
    = statement* EOF

EOF
    = _ !.

statement 
    = declaration_statement

declaration_statement 
    = declaration

declaration
    = function_declaration

function_declaration
    = prefix 'func' function_name generic_parameter_clause function_parameter_clause maythrow function_result .*

maythrow
    = ('throws' / 'rethrows')?

function_name
    = name
    / #error(11, "function_name")

function_parameter_clause
    = '(' function_parameters? ')'
    / #error( "function_parameters" )

function_parameters
    = function_parameter (',' function_parameter)*

function_parameter
    = external_name local_name type_annotation default_argument
    / external_name local_name type_annotation '...'
    / external_name local_name type_annotation
    / local_name type_annotation default_argument
    / local_name type_annotation '...'
    / local_name type_annotation

function_result
    = '->' attributes type
    / '->' #error( "function_result" )

external_name
    = name

local_name
    = name

default_argument
    = _ '=' expression

type_annotation
    = ':' attribute* 'inout'? type

generic_parameter_clause
    = '<' generic_parameters '>'
    / '<' #error( "generic_parameters" )
    /

generic_parameters
    = generic_parameter (',' generic_parameter)*

generic_parameter
    = type_name ':' protocol_composition_type
    / type_name ':' type_identifier
    / type_name
    / #error( "generic_parameter" )

generic_argument_clause
    = '<' generic_arguments '>'
    / '<' #error("generic_arguments")
    /

generic_arguments
    = generic_argument (',' generic_argument)*

generic_argument
    = type

prefix
    = attributes modifiers

attributes
    = attribute*

attribute
    = '@' name
    / '@' #error( "attribute" )

modifiers
    = modifier*

modifier
    = _ modifier_token

modifier_token
    = 'private'
    / 'public'
    / 'internal'

//== expression

expression
    = name

//== types

type
    = type_identifier
    / protocol_composition_type

type_name
    = name

type_identifier
    = type_identifier_part ('.' type_identifier_part)*

type_identifier_part
    = type_name generic_argument_clause

protocol_composition_type
    = type_identifier ('&' type_identifier)+

// ==
// == literals
// ==

name
    = _ ([a-zA-Z_][a-zA-Z0-9_]*)

// ==
// == spacing
// ==
_
    = space*

space
    = (single_line_comment / multi_line_comment / whitespace)+

single_line_comment
    = "//" (![\n\r] .)* 

multi_line_comment
    = start_comment (not_comment / multi_line_comment)* stop_comment

not_comment
    = !start_comment !stop_comment .

start_comment
    = "/*"

stop_comment
    = "*/"

whitespace
    = [\n\r\t ]

