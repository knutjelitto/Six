@namespace SixComp.Peg
@accessibility internal
@classname Parser
@ignorecase false
//@resources MyProject.Properties.Resources
@start unit
@trace false
//@using System.Linq
//@using { Foo = System.String }

unit
    = statement* _ EOF

EOF	<IName>
    = sp:_ !.   { new Names.Name(sp, string.Empty, state) }

statement 
    = declaration_statement

declaration_statement 
    = declaration

declaration
    = function_declaration

function_declaration
    = prefix func function_name generic_parameters? function_parameters maythrow function_result .*

maythrow
    = ('throws' / 'rethrows')?

function_name
    = name
    / #error{ "function_name" }

function_parameters
    = lparent function_parameter<0,,comma> rparent
    / #error{ "function_parameters" }

function_parameter
    = external_name local_name type_annotation default_argument
    / external_name local_name type_annotation _ '...'
    / external_name local_name type_annotation
    / local_name type_annotation default_argument
    / local_name type_annotation _ '...'
    / local_name type_annotation

function_result <Funcs.Result>
    = d:arrow a:attributes t:type { new Funcs.Result(d, a, t, state) }
    / d:arrow #error{ "function_result" }

external_name
    = _ name

local_name
    = _ name

default_argument
    = _ '=' expression

type_annotation
    = colon attribute* _ 'inout'? type

generic_parameters
    = langle generic_parameter<1,,comma> rangle
    / langle #error{ "generic_parameters" }

generic_parameter <Generics.Parameter>
    = n:type_name c:colon t:protocol_composition_type   { new Generics.Parameter(n, c, t) }
    / n:type_name c:colon t:type_identifier             { new Generics.Parameter(n, c, t) }
    / n:type_name                                       { new Generics.Parameter(n, null, null) }
    / #error{ "generic_parameter" }

generic_arguments <Generics.Arguments>
    = la:langle f:generic_argument r:generic_argument_more* ra:rangle { new Generics.Arguments(la, f, r, ra, state) }
    / la:langle #error{ "generic_arguments" }

generic_argument <Generics.Argument>
    = t:type                                            { new Generics.Argument(t, state) }

generic_argument_more <Generics.Argument>
    = c:comma t:type                                    { new Generics.Argument(new Types.PrefixedType(c, t), state) }

prefix
    = a:attributes m:modifiers

attributes <Prefixes.Attributes>
    = a:attribute* { new Prefixes.Attributes(a, state) }

attribute <Prefixes.Attribute>
    = a:at n:name  { new Prefixes.Attribute(a, n, state) }
    / a:at #error{ "attribute" }

modifiers
    = modifier*

modifier <IToken>
    = sp:_  text:modifier_token { new Names.Token(sp, text, state) }

modifier_token
    = 'private'
    / 'public'
    / 'internal'

//== expression

expression
    = name

//== types

type <IType>
    = type_identifier
    / protocol_composition_type

type_name
    = name

type_identifier <IType> -memoize
    = start:type_identifier_part rest:type_identifier_rest*  { new Types.Identifier(start, rest) }

type_identifier_part <IType>
    = t:type_name a:generic_arguments? { new Types.IdentifierPart(t, a) }

type_identifier_rest <IType>
    = d:dot t:type_identifier_part { new Types.PrefixedType(d, t) }

protocol_composition_type <IType> -memoize
    = ids:type_identifier<2,,(_ '&')> { new Types.Composed(ids) }


//== literals

name <IName>
    = sp:_ id:([a-zA-Z_][a-zA-Z0-9_]*) { new Names.Name(sp, id, state) }

//== helpers

func    <IToken> = sp:_ id:'func'  { new Names.Token(sp, id, state) }

dot     <IToken> = sp:_ id:'.'  { new Names.Token(sp, id, state) }
comma   <IToken> = sp:_ id:','  { new Names.Token(sp, id, state) }
colon   <IToken> = sp:_ id:':'  { new Names.Token(sp, id, state) }
at      <IToken> = sp:_ id:'@'  { new Names.Token(sp, id, state) }
arrow   <IToken> = sp:_ id:'->' { new Names.Token(sp, id, state) }
langle  <IToken> = sp:_ id:'<'  { new Names.Token(sp, id, state) }
rangle  <IToken> = sp:_ id:'>'  { new Names.Token(sp, id, state) }
lparent <IToken> = sp:_ id:'('  { new Names.Token(sp, id, state) }
rparent <IToken> = sp:_ id:')'  { new Names.Token(sp, id, state) }


//== spacing

_ <ISpace>
    = sp:space* { new Spaces.Space(spStart, sp, state) }

space
    = w:line_comment+ { string.Join(string.Empty, w) }
    / w:whitespace+   { string.Join(string.Empty, w) }
    / w:comment+	  { string.Join(string.Empty, w) }		

line_comment
    = '//' (![\n\r] .)* 

comment
    = start_comment (not_comment / comment)* stop_comment

not_comment
    = !start_comment !stop_comment .

start_comment
    = '/*'

stop_comment
    = '*/'

whitespace
    = [\n\r\t ]

